# =============================================================================
# DOCKER COMPOSE - Station Traffeyère IoT/AI Platform
# Configuration Coolify Production - RNCP 39394
# Domaines: frontend-station & backend-station.johann-lebel.fr
# =============================================================================

version: '3.8'

services:
  # ==========================================================================
  # REVERSE PROXY NGINX - Point d'entrée SSL/TLS
  # ==========================================================================
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: station-nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./proxy/ssl:/etc/nginx/ssl:ro
      - proxy_logs:/var/log/nginx
    networks:
      - public
      - private
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128m
          cpus: '0.2'

  # ==========================================================================
  # FRONTEND - React/Vite SPA
  # ==========================================================================
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_URL: https://backend-station.johann-lebel.fr
        VITE_WS_URL: wss://backend-station.johann-lebel.fr/ws
        VITE_GRAFANA_URL: https://grafana.johann-lebel.fr
        VITE_PROMETHEUS_URL: https://prometheus.johann-lebel.fr
    container_name: station-frontend
    restart: unless-stopped
    networks:
      - private
    volumes:
      - frontend_logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthz"]
      interval: 30s
      timeout: 5s
      start_period: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${FRONTEND_MEMORY_LIMIT}
          cpus: '0.5'
    labels:
      - coolify.managed=true
      - coolify.name=station-frontend
      - coolify.http.domain=frontend-station.johann-lebel.fr
      - coolify.http.redirect=true

  # ==========================================================================
  # BACKEND API - FastAPI Python
  # ==========================================================================
  backend:
    build:
      context: ./services/backend
      dockerfile: Dockerfile
      target: production
    container_name: station-backend
    restart: unless-stopped
    environment:
      # Base de données
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      
      # Cache Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      
      # Time Series InfluxDB
      INFLUXDB_HOST: influxdb
      INFLUXDB_PORT: 8086
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      INFLUXDB_ORG: ${INFLUXDB_ORG}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      
      # Object Storage MinIO
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      API_SECRET_KEY: ${API_SECRET_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # Application
      FASTAPI_ENV: production
      LOG_LEVEL: ${LOG_LEVEL}
      DEBUG: ${DEBUG}
      
      # Monitoring
      PROMETHEUS_METRICS_ENABLED: true
      SENTRY_DSN: ${SENTRY_DSN}
    networks:
      - private
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "--spider", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${BACKEND_MEMORY_LIMIT}
          cpus: '1.0'
    labels:
      - coolify.managed=true
      - coolify.name=station-backend
      - coolify.http.domain=backend-station.johann-lebel.fr
      - coolify.http.redirect=true

  # ==========================================================================
  # DATABASE - PostgreSQL + TimescaleDB
  # ==========================================================================
  postgres:
    image: timescale/timescaledb:2.14.2-pg15
    container_name: station-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=peer"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - private
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 5
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT}
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true

  # ==========================================================================
  # CACHE - Redis
  # ==========================================================================
  redis:
    image: redis:7.2-alpine
    container_name: station-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --save 900 1 --save 300 10
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    networks:
      - private
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT}
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true

  # ==========================================================================
  # TIME SERIES DB - InfluxDB
  # ==========================================================================
  influxdb:
    image: influxdb:2.7-alpine
    container_name: station-influxdb
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_ADMIN_USER}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - private
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${INFLUXDB_MEMORY_LIMIT}
          cpus: '0.5'
    labels:
      - coolify.managed=true
      - coolify.name=station-influxdb
      - coolify.http.domain=influxdb.johann-lebel.fr
      - coolify.http.port=8086

  # ==========================================================================
  # OBJECT STORAGE - MinIO S3
  # ==========================================================================
  minio:
    image: minio/minio:RELEASE.2024-01-28T22-35-53Z
    container_name: station-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
      - ./storage/minio/init:/docker-entrypoint-initdb.d:ro
    networks:
      - private
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${MINIO_MEMORY_LIMIT}
          cpus: '0.5'
    labels:
      - coolify.managed=true
      - coolify.name=station-minio
      - coolify.http.domain=minio.johann-lebel.fr
      - coolify.http.port=9001

  # ==========================================================================
  # MONITORING - Prometheus
  # ==========================================================================
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: station-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION}'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=${PROMETHEUS_URL}'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - private
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "-qO-", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${PROMETHEUS_MEMORY_LIMIT}
          cpus: '1.0'
    labels:
      - coolify.managed=true
      - coolify.name=station-prometheus
      - coolify.http.domain=prometheus.johann-lebel.fr
      - coolify.http.port=9090

  # ==========================================================================
  # VISUALIZATION - Grafana
  # ==========================================================================
  grafana:
    image: grafana/grafana:10.2.0
    container_name: station-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_SERVER_ROOT_URL: ${GRAFANA_URL}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - private
    depends_on:
      - prometheus
      - influxdb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: ${GRAFANA_MEMORY_LIMIT}
          cpus: '0.5'
    labels:
      - coolify.managed=true
      - coolify.name=station-grafana
      - coolify.http.domain=grafana.johann-lebel.fr
      - coolify.http.port=3000

  # ==========================================================================
  # IOT SERVICES - Générateur de données + Edge AI
  # ==========================================================================
  iot-generator:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: station-iot-generator
    restart: unless-stopped
    command: ["python", "scripts/iot_data_generator.py"]
    environment:
      IOT_GENERATOR_PORT: ${IOT_GENERATOR_PORT}
      IOT_SENSORS_COUNT: ${IOT_SENSORS_COUNT}
      PROMETHEUS_GATEWAY: prometheus:9091
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      INFLUXDB_ORG: ${INFLUXDB_ORG}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
    volumes:
      - iot_data:/app/data
      - iot_models:/app/models
    networks:
      - private
    depends_on:
      - influxdb
    healthcheck:
      test: ["CMD", "wget", "-qO-", "--spider", "http://localhost:8090/metrics"]
      interval: 60s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.5'

  edge-ai:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: station-edge-ai
    restart: unless-stopped
    command: ["python", "scripts/edge_ai_engine.py"]
    environment:
      EDGE_AI_PORT: ${EDGE_AI_PORT}
      AI_MODEL_TYPE: ${AI_MODEL_TYPE}
      LATENCY_TARGET_MS: ${LATENCY_TARGET_MS}
      PROMETHEUS_GATEWAY: prometheus:9091
    volumes:
      - ai_models:/app/models
      - ai_data:/app/data
    networks:
      - private
    depends_on:
      - iot-generator
    healthcheck:
      test: ["CMD", "wget", "-qO-", "--spider", "http://localhost:8091/metrics"]
      interval: 60s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '1.0'

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  public:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  private:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16

# =============================================================================
# VOLUMES PERSISTANTS
# =============================================================================
volumes:
  # Base de données
  postgres_data:
    driver: local
  postgres_logs:
    driver: local
  redis_data:
    driver: local
  redis_logs:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  
  # Storage
  minio_data:
    driver: local
  
  # Monitoring
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  
  # Application
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  backend_models:
    driver: local
  frontend_logs:
    driver: local
  
  # Proxy
  proxy_logs:
    driver: local
  
  # IoT & AI
  iot_data:
    driver: local
  iot_models:
    driver: local
  ai_models:
    driver: local
  ai_data:
    driver: local
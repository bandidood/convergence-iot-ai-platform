# =============================================================================
# PIPELINE CI/CD SECURISE MLOPS - RNCP 39394 (Version Test)
# Expert en Systemes d'Information et Securite
# 
# Pipeline DevSecOps avec 15 controles securite
# Conformite ISA/IEC 62443 SL2+ + deploiement Blue/Green
# =============================================================================

stages:
  - security-scan
  - build
  - test-unit
  - test-security
  - test-integration
  - deploy-staging
  - security-audit
  - deploy-production
  - monitoring

# Variables globales securisees
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  BUILDKIT_PROGRESS: plain
  IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}
  REGISTRY_IMAGE: ${CI_REGISTRY_IMAGE}/edge-ai-engine
  SECURITY_SCAN_LEVEL: "high"
  VULNERABILITY_THRESHOLD: "medium"
  CODE_COVERAGE_THRESHOLD: "85"
  KUBERNETES_NAMESPACE: "rncp-39394"
  DEPLOYMENT_STRATEGY: "blue-green"
  HEALTH_CHECK_TIMEOUT: "300s"

# =============================================================================
# STAGE 1: SECURITY SCANNING
# =============================================================================

sast-sonarqube:
  stage: security-scan
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - echo "Analyse statique SonarQube..."
    - sonar-scanner -Dsonar.projectKey=rncp-39394-iot-ai -Dsonar.sources=core/
  coverage: '/Coverage: \d+\.\d+%/'
  artifacts:
    reports:
      sonarqube: sonar-report.json
  allow_failure: false
  only:
    - merge_requests
    - main
    - develop

secret-scanning:
  stage: security-scan
  image: trufflesecurity/trufflehog:latest
  script:
    - echo "Scan secrets et credentials..."
    - trufflehog filesystem . --exclude-paths=".git,.gitlab-ci.yml" --format=json --output=secrets-report.json
    - |
      if [ -s secrets-report.json ]; then
        echo "Secrets detectes dans le code!"
        cat secrets-report.json
        exit 1
      else
        echo "Aucun secret detecte"
      fi
  artifacts:
    reports:
      security: secrets-report.json
  allow_failure: false

# =============================================================================
# STAGE 2: BUILD SECURISE
# =============================================================================

build-ai-engine:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker info
  script:
    - echo "Build container Edge AI Engine..."
    - docker build --pull --tag $REGISTRY_IMAGE:$IMAGE_TAG --tag $REGISTRY_IMAGE:latest core/edge-ai-engine/
  artifacts:
    paths:
      - ai-engine-image.tar
    expire_in: 1 hour
  only:
    - main
    - develop
    - merge_requests

# =============================================================================
# STAGE 3: TESTS UNITAIRES
# =============================================================================

performance-benchmarks:
  stage: test-unit
  image: python:3.11
  script:
    - echo "Benchmarks performance IA..."
    - pip install -r core/edge-ai-engine/requirements.txt
    - python core/edge-ai-engine/demo_ai_engine.py > benchmark-results.txt
    - python scripts/validate_performance_thresholds.py
  artifacts:
    paths:
      - benchmark-results.txt
    reports:
      performance: performance-metrics.json
  allow_failure: false

# =============================================================================
# STAGE 4: TESTS SECURITE
# =============================================================================

adversarial-security-tests:
  stage: test-security
  image: python:3.11
  script:
    - echo "Tests securite adversariale..."
    - pip install -r core/edge-ai-engine/requirements.txt
    - python core/edge-ai-engine/adversarial_security_test.py
    - python scripts/validate_security_thresholds.py
  artifacts:
    paths:
      - core/edge-ai-engine/models/security_summary.txt
    reports:
      security: security-test-results.json
  allow_failure: false

# =============================================================================
# STAGE 5: TESTS INTEGRATION
# =============================================================================

integration-tests:
  stage: test-integration
  image: docker:24-dind
  services:
    - docker:24-dind
  script:
    - echo "Tests integration end-to-end..."
    - sleep 30
  artifacts:
    reports:
      junit: integration-test-results.xml
  allow_failure: false

# =============================================================================
# STAGE 6: DEPLOIEMENT STAGING
# =============================================================================

deploy-staging:
  stage: deploy-staging
  image: bitnami/kubectl:latest
  environment:
    name: staging
    url: https://staging.rncp-39394.example.com
  script:
    - echo "Deploiement environnement staging..."
  only:
    - main
    - develop

# =============================================================================
# STAGE 7: AUDIT SECURITE
# =============================================================================

compliance-check:
  stage: security-audit
  image: python:3.11
  script:
    - echo "Verification conformite ISA/IEC 62443..."
  artifacts:
    paths:
      - compliance-report.pdf
  only:
    - main

# =============================================================================
# STAGE 8: DEPLOIEMENT PRODUCTION
# =============================================================================

deploy-production:
  stage: deploy-production
  image: bitnami/kubectl:latest
  environment:
    name: production
    url: https://rncp-39394.example.com
  script:
    - echo "Deploiement production Blue/Green..."
  when: manual
  only:
    - main

# =============================================================================
# STAGE 9: MONITORING
# =============================================================================

setup-monitoring:
  stage: monitoring
  image: bitnami/kubectl:latest
  script:
    - echo "Configuration monitoring et alertes..."
  only:
    - main

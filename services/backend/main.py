# =============================================================================
# MAIN FASTAPI APPLICATION - Station Traffey√®re IoT/AI Platform
# Backend API pour la gestion IoT, IA et monitoring - RNCP 39394
# =============================================================================

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import uvicorn
import os
import logging
from datetime import datetime
from typing import Dict, Any
import sys
import traceback

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Configuration de l'application
PROJECT_NAME = os.getenv("PROJECT_NAME", "Station Traffey√®re IoT/AI Platform")
PROJECT_VERSION = os.getenv("PROJECT_VERSION", "1.0.0")
RNCP_CODE = os.getenv("RNCP_CODE", "39394")
ENVIRONMENT = os.getenv("FASTAPI_ENV", "production")
DEBUG = os.getenv("FASTAPI_DEBUG", "false").lower() == "true"

# Gestionnaire de contexte pour le cycle de vie de l'app
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire du cycle de vie de l'application"""
    # D√©marrage
    logger.info("üöÄ D√©marrage de l'application FastAPI")
    logger.info(f"üìä Projet: {PROJECT_NAME}")
    logger.info(f"üéì RNCP: {RNCP_CODE}")
    logger.info(f"üè∑Ô∏è Version: {PROJECT_VERSION}")
    logger.info(f"üåç Environment: {ENVIRONMENT}")
    
    try:
        # Ici vous pourriez ajouter:
        # - Connexion aux bases de donn√©es
        # - Initialisation des services externes
        # - Chargement des mod√®les IA
        # - Configuration des connexions MQTT/InfluxDB
        logger.info("‚úÖ Initialisation termin√©e")
        yield
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation: {e}")
        logger.error(traceback.format_exc())
        raise
    finally:
        # Nettoyage
        logger.info("üõë Arr√™t gracieux de l'application")

# Cr√©ation de l'application FastAPI
app = FastAPI(
    title=PROJECT_NAME,
    description=f"""
    üè≠ **API Backend pour la Station Traffey√®re IoT/AI Platform**
    
    ## üéØ Objectifs RNCP {RNCP_CODE}
    
    Cette API fait partie d'un projet de validation des comp√©tences 
    **Expert en Syst√®mes d'Information et S√©curit√©**.
    
    ## üèóÔ∏è Architecture
    
    - **IoT Data Management**: Collecte et traitement des donn√©es capteurs
    - **Edge AI Engine**: D√©tection d'anomalies en temps r√©el
    - **Digital Twin Integration**: Synchronisation avec le jumeau num√©rique
    - **Blockchain Compliance**: Tra√ßabilit√© et conformit√© r√©glementaire
    - **SIEM Integration**: Monitoring de s√©curit√© avanc√©
    
    ## üîí S√©curit√©
    
    - Architecture Zero Trust
    - Chiffrement bout-en-bout
    - Conformit√© ISA/IEC 62443 SL3+
    - Audit trail complet
    
    """,
    version=PROJECT_VERSION,
    docs_url="/docs" if DEBUG else "/docs",
    redoc_url="/redoc" if DEBUG else "/redoc",
    lifespan=lifespan,
    debug=DEBUG
)

# Configuration CORS pour les environnements de d√©veloppement
if ENVIRONMENT == "development" or DEBUG:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # √Ä restreindre en production
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
else:
    # Configuration CORS restrictive pour la production
    allowed_origins = [
        "https://traffeyere.ccdigital.fr",
        "https://app.traffeyere.ccdigital.fr",
        "https://www.traffeyere.ccdigital.fr",
    ]
    app.add_middleware(
        CORSMiddleware,
        allow_origins=allowed_origins,
        allow_credentials=True,
        allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH"],
        allow_headers=["*"],
    )

# Middleware de s√©curit√© - Trusted Host
if ENVIRONMENT == "production":
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=[
            "api.traffeyere.ccdigital.fr",
            "traffeyere.ccdigital.fr",
            "localhost",  # Pour les health checks internes
            "127.0.0.1"   # Pour les health checks internes
        ]
    )

# Middleware de logging des requ√™tes
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Middleware de logging des requ√™tes"""
    start_time = datetime.utcnow()
    
    # Log de la requ√™te entrante
    logger.info(f"üì• {request.method} {request.url} - IP: {request.client.host}")
    
    try:
        response = await call_next(request)
        
        # Calcul du temps de traitement
        process_time = (datetime.utcnow() - start_time).total_seconds()
        
        # Log de la r√©ponse
        logger.info(f"üì§ {request.method} {request.url} - Status: {response.status_code} - Time: {process_time:.3f}s")
        
        # Ajout du header de temps de traitement
        response.headers["X-Process-Time"] = str(process_time)
        
        return response
        
    except Exception as e:
        # Log des erreurs
        process_time = (datetime.utcnow() - start_time).total_seconds()
        logger.error(f"‚ùå {request.method} {request.url} - Error: {str(e)} - Time: {process_time:.3f}s")
        logger.error(traceback.format_exc())
        
        # Retourner une r√©ponse d'erreur g√©n√©rique
        return JSONResponse(
            status_code=500,
            content={
                "error": "Internal Server Error",
                "message": "Une erreur inattendue s'est produite",
                "timestamp": datetime.utcnow().isoformat(),
                "path": str(request.url),
                "method": request.method
            },
            headers={"X-Process-Time": str(process_time)}
        )

# =============================================================================
# ROUTES DE BASE - Health Checks et Information
# =============================================================================

@app.get("/")
async def root():
    """Point d'entr√©e principal de l'API"""
    return {
        "message": f"Bienvenue sur {PROJECT_NAME}",
        "version": PROJECT_VERSION,
        "rncp_code": RNCP_CODE,
        "environment": ENVIRONMENT,
        "status": "operational",
        "timestamp": datetime.utcnow().isoformat(),
        "documentation": {
            "swagger": "/docs",
            "redoc": "/redoc"
        },
        "project": {
            "name": "Station de Traitement des Eaux IoT/AI",
            "location": "Saint-Quentin-Fallavier, France",
            "coordinates": "45.764043,4.835659",
            "description": "Plateforme IoT/IA convergente pour la transformation digitale des infrastructures critiques"
        }
    }

@app.get("/health")
@app.head("/health")
@app.get("/healthz")
@app.head("/healthz")
async def health_check():
    """Health check pour les orchestrateurs (Kubernetes, Docker, etc.)"""
    try:
        # Ici vous pourriez ajouter des v√©rifications:
        # - Connexion base de donn√©es
        # - Connexion Redis
        # - Connexion InfluxDB
        # - √âtat des services externes
        
        return {
            "status": "healthy",
            "timestamp": datetime.utcnow().isoformat(),
            "version": PROJECT_VERSION,
            "environment": ENVIRONMENT,
            "services": {
                "api": "operational",
                "database": "checking",  # √Ä impl√©menter
                "redis": "checking",     # √Ä impl√©menter
                "influxdb": "checking",  # √Ä impl√©menter
                "mqtt": "checking"       # √Ä impl√©menter
            },
            "system": {
                "python_version": sys.version,
                "fastapi_version": "0.104.0"  # √Ä r√©cup√©rer dynamiquement
            }
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(
            status_code=503,
            detail={
                "status": "unhealthy",
                "error": str(e),
                "timestamp": datetime.utcnow().isoformat()
            }
        )

@app.get("/info")
async def app_info():
    """Informations d√©taill√©es sur l'application"""
    return {
        "project": {
            "name": PROJECT_NAME,
            "version": PROJECT_VERSION,
            "rncp_code": RNCP_CODE,
            "description": "API Backend pour plateforme IoT/IA convergente"
        },
        "technical_stack": {
            "framework": "FastAPI",
            "language": "Python 3.11+",
            "database": "PostgreSQL + TimescaleDB",
            "cache": "Redis",
            "timeseries": "InfluxDB",
            "messaging": "MQTT (Eclipse Mosquitto)",
            "monitoring": "Prometheus + Grafana"
        },
        "architecture": {
            "pattern": "Microservices",
            "deployment": "Docker + Kubernetes",
            "security": "Zero Trust",
            "compliance": "ISA/IEC 62443 SL3+"
        },
        "environment": {
            "current": ENVIRONMENT,
            "debug": DEBUG,
            "timestamp": datetime.utcnow().isoformat()
        },
        "rncp_validation": {
            "code": RNCP_CODE,
            "title": "Expert en Syst√®mes d'Information et S√©curit√©",
            "competencies_covered": [
                "Bloc 3: Cybers√©curit√© et conformit√©",
                "Bloc 4: Innovation IoT et IA",
                "Architecture cloud-native",
                "DevSecOps et automatisation"
            ]
        }
    }

@app.get("/metrics")
async def metrics():
    """M√©triques pour Prometheus (format basique)"""
    # √Ä impl√©menter avec prometheus_client
    return {
        "http_requests_total": 0,
        "http_request_duration_seconds": 0.0,
        "system_cpu_usage": 0.0,
        "system_memory_usage": 0.0,
        "active_connections": 0,
        "timestamp": datetime.utcnow().isoformat()
    }

# =============================================================================
# ROUTES IoT ET DONN√âES CAPTEURS (Exemples pour validation)
# =============================================================================

@app.get("/api/v1/sensors")
async def get_sensors():
    """Liste des capteurs de la station"""
    return {
        "sensors": [
            {
                "id": "PH_001",
                "name": "pH M√®tre Principal",
                "type": "ph",
                "unit": "pH",
                "location": "Bassin d'a√©ration",
                "status": "active",
                "last_reading": 7.2,
                "timestamp": datetime.utcnow().isoformat()
            },
            {
                "id": "O2_001", 
                "name": "Oxym√®tre Dissous",
                "type": "oxygen",
                "unit": "mg/L",
                "location": "Bassin d'a√©ration",
                "status": "active",
                "last_reading": 4.5,
                "timestamp": datetime.utcnow().isoformat()
            },
            {
                "id": "TURB_001",
                "name": "Turbidim√®tre",
                "type": "turbidity",
                "unit": "NTU",
                "location": "Sortie clarificateur",
                "status": "active",
                "last_reading": 15.2,
                "timestamp": datetime.utcnow().isoformat()
            },
            {
                "id": "FLOW_001",
                "name": "D√©bitm√®tre Principal",
                "type": "flow",
                "unit": "m¬≥/h",
                "location": "Entr√©e station",
                "status": "active",
                "last_reading": 2400,
                "timestamp": datetime.utcnow().isoformat()
            }
        ],
        "total": 4,
        "active": 4,
        "station": {
            "id": "TRAFFEYERE_001",
            "name": "Station Traffey√®re",
            "location": "45.764043,4.835659"
        }
    }

@app.get("/api/v1/anomalies")
async def get_anomalies():
    """D√©tection d'anomalies par IA Edge"""
    return {
        "anomalies": [
            {
                "id": "ANOM_001",
                "timestamp": datetime.utcnow().isoformat(),
                "severity": "medium",
                "type": "sensor_drift",
                "sensor_id": "PH_001",
                "description": "D√©rive graduelle du pH d√©tect√©e",
                "confidence": 0.87,
                "ai_model": "IsolationForest",
                "edge_latency_ms": 0.28,
                "recommended_action": "Calibration capteur pH recommand√©e"
            }
        ],
        "summary": {
            "total_today": 3,
            "critical": 0,
            "high": 1,
            "medium": 2,
            "low": 0
        },
        "ai_performance": {
            "model_accuracy": 0.976,
            "avg_latency_ms": 0.32,
            "false_positive_rate": 0.024
        }
    }

# =============================================================================
# GESTION D'ERREURS GLOBALE
# =============================================================================

@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    """Gestionnaire d'erreur 404 personnalis√©"""
    return JSONResponse(
        status_code=404,
        content={
            "error": "Resource Not Found",
            "message": "La ressource demand√©e n'existe pas",
            "path": str(request.url),
            "method": request.method,
            "timestamp": datetime.utcnow().isoformat(),
            "suggestion": "Consultez la documentation API √† /docs"
        }
    )

@app.exception_handler(500)
async def internal_server_error_handler(request: Request, exc: Exception):
    """Gestionnaire d'erreur 500 personnalis√©"""
    logger.error(f"Internal server error: {exc}")
    logger.error(traceback.format_exc())
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal Server Error",
            "message": "Une erreur interne s'est produite",
            "path": str(request.url),
            "method": request.method,
            "timestamp": datetime.utcnow().isoformat(),
            "support": "Contactez l'administrateur syst√®me"
        }
    )

# =============================================================================
# POINT D'ENTR√âE POUR D√âVELOPPEMENT LOCAL
# =============================================================================

if __name__ == "__main__":
    # Configuration pour d√©veloppement local uniquement
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info",
        access_log=True
    )
version: '3.8'

# ============================================================================
# DOCKER COMPOSE LIGHT VERSION - Station Traffeyère IoT/AI Platform  
# Version allégée pour démarrage rapide - évite timeout 504
# Services essentiels uniquement - démarrage < 60 secondes
# ============================================================================

services:
  # Base de données principale
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-station_traffeyere}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Cache Redis
  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # InfluxDB pour métriques IoT
  influxdb:
    image: influxdb:2.7-alpine
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUX_USERNAME:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUX_ORG:-traffeyere}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUX_BUCKET:-iot_sensors}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_ADMIN_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8086/ping"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 60s

  # MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2.0.18
    restart: unless-stopped
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    networks:
      - backend
      - iot_network
    healthcheck:
      test: ["CMD", "sh", "-c", "mosquitto_pub -h localhost -p 1883 -t test/health -m ping"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Prometheus métriques
  prometheus:
    image: prom/prometheus:v2.47.2
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-admin-api'
    volumes:
      - prometheus_data:/prometheus
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/healthy"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Grafana dashboards
  grafana:
    image: grafana/grafana:10.2.0
    restart: unless-stopped
    user: "472"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SERVER_DOMAIN: grafana.johann-lebel.fr
      GF_SERVER_ROOT_URL: https://grafana.johann-lebel.fr
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - backend
      - frontend
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.johann-lebel.fr`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Backend FastAPI
  backend:
    build:
      context: .
      dockerfile: ./services/backend/Dockerfile
      args:
        - ENVIRONMENT=production
    restart: unless-stopped
    environment:
      PROJECT_NAME: "Station Traffeyère IoT/AI Platform"
      RNCP_CODE: "39394"
      ENVIRONMENT: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-station_traffeyere}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      INFLUX_URL: http://influxdb:8086
      INFLUX_TOKEN: ${INFLUX_ADMIN_TOKEN}
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      MQTT_BROKER_HOST: mosquitto
      MQTT_BROKER_PORT: 1883
      STATION_ID: ${STATION_ID:-TRAFFEYERE_001}
    volumes:
      - backend_logs:/app/logs
    networks:
      - backend
      - frontend
      - iot_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`backend-station.johann-lebel.fr`) || Host(`api.johann-lebel.fr`)"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  # Frontend React
  frontend:
    build:
      context: .
      dockerfile: ./services/frontend/Dockerfile
      args:
        - VITE_API_URL=https://backend-station.johann-lebel.fr
        - VITE_WS_URL=wss://backend-station.johann-lebel.fr/ws
        - VITE_GRAFANA_URL=https://grafana.johann-lebel.fr
        - VITE_ENVIRONMENT=production
    restart: unless-stopped
    networks:
      - frontend
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthz"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`frontend-station.johann-lebel.fr`) || Host(`traffeyere.johann-lebel.fr`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

# Volumes persistants
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
  backend_logs:
    driver: local

# Réseaux segmentés avec configuration optimisée
networks:
  backend:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500
  frontend:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500
  iot_network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500
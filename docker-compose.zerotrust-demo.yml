version: '3.8'

# Demo Architecture Zero-Trust avec micro-segmentation
# Station Traffeyère - RNCP 39394 Semaine 5

services:

  # ═══════════════════════════════════════════════════════════════
  # 🌐 DMZ PUBLIQUE - Load Balancer Traefik
  # ═══════════════════════════════════════════════════════════════
  
  traefik:
    image: traefik:v3.0
    container_name: zt-traefik-lb
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --log.level=INFO
      - --metrics.prometheus=true
    ports:
      - "8000:80"
      - "8081:8080"  # Dashboard Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - dmz_public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`localhost`)"
      - "traefik.http.routers.api.service=api@internal"

  # ═══════════════════════════════════════════════════════════════
  # 🏭 ZONE CAPTEURS IoT - Générateur sécurisé
  # ═══════════════════════════════════════════════════════════════
  
  iot-generator:
    image: nginx:alpine
    container_name: zt-iot-generator
    ports:
      - "8092:80"
    networks:
      - zone_capteurs
      - monitoring
    volumes:
      - type: tmpfs
        target: /var/log/nginx
    environment:
      - ZONE=zone_capteurs
      - SECURITY_LEVEL=high
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=monitoring"
      - "traefik.http.routers.iot.rule=Host(`iot.localhost`)"

  # ═══════════════════════════════════════════════════════════════
  # 🔒 CŒUR MÉTIER - Base de données sécurisée
  # ═══════════════════════════════════════════════════════════════
  
  postgres-secure:
    image: postgres:15-alpine
    container_name: zt-postgres
    environment:
      POSTGRES_DB: station_traffeyere
      POSTGRES_USER: station_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - core_business
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U station_user -d station_traffeyere"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis-secure:
    image: redis:7.2-alpine
    container_name: zt-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - core_business
    volumes:
      - redis_data:/data

  # ═══════════════════════════════════════════════════════════════
  # 📊 MONITORING SÉCURISÉ
  # ═══════════════════════════════════════════════════════════════
  
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: zt-prometheus
    ports:
      - "9091:9090"
    networks:
      - monitoring
      - app_frontend
    volumes:
      - prometheus_data:/prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app_frontend"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"

  grafana:
    image: grafana/grafana:10.2.0
    container_name: zt-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "3002:3000"
    networks:
      - monitoring
      - app_frontend
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app_frontend"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

# ═══════════════════════════════════════════════════════════════
# 🌐 MICRO-SEGMENTATION RÉSEAU ZERO-TRUST
# ═══════════════════════════════════════════════════════════════

networks:
  # DMZ publique - Accès externe contrôlé
  dmz_public:
    driver: bridge
    ipam:
      config:
        - subnet: 10.1.0.0/24
          gateway: 10.1.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    labels:
      zone: "dmz_public"
      security_level: "medium"
  
  # Zone capteurs IoT - Réseau isolé
  zone_capteurs:
    driver: bridge
    ipam:
      config:
        - subnet: 10.2.0.0/24
          gateway: 10.2.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    labels:
      zone: "zone_capteurs"
      security_level: "high"
  
  # Cœur métier - Services critiques
  core_business:
    driver: bridge
    ipam:
      config:
        - subnet: 10.3.0.0/24
          gateway: 10.3.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    internal: true  # Isolation complète
    labels:
      zone: "core_business"
      security_level: "critical"
  
  # Frontend applications
  app_frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 10.4.0.0/24
          gateway: 10.4.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    labels:
      zone: "app_frontend"
      security_level: "medium"
  
  # Monitoring et observabilité
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 10.6.0.0/24
          gateway: 10.6.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    labels:
      zone: "monitoring"
      security_level: "medium"

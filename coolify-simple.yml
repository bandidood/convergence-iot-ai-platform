# =============================================================================
# STATION TRAFFEYÈRE - Configuration Coolify Simplifiée
# Version compatible avec l'interface Coolify existante
# =============================================================================

# Variables d'environnement requises pour ce déploiement
# À définir dans Coolify : Settings > Environment Variables
# 
# DOMAIN_ROOT=votre-domaine.com
# GIT_REPOSITORY_URL=https://github.com/bandidood/convergence-iot-ai-platform.git
# POSTGRES_DB=station_traffeyere
# POSTGRES_USER=postgres
# POSTGRES_PASSWORD=<généré-par-script>
# REDIS_PASSWORD=<généré-par-script>
# SECRET_KEY=<généré-par-script>
# JWT_SECRET=<généré-par-script>

version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres-traffeyere
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-station_traffeyere}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-station_traffeyere}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: redis-traffeyere
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Base de données temporelle InfluxDB
  influxdb:
    image: influxdb:2.7-alpine
    container_name: influxdb-traffeyere
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUX_USERNAME:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUX_ORG:-traffeyere}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUX_BUCKET:-iot_sensors}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_ADMIN_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    ports:
      - "8086:8086"
    networks:
      - backend
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.influxdb.rule=Host(`influx.${DOMAIN_ROOT}`)"
      - "traefik.http.routers.influxdb.tls=true"
      - "traefik.http.routers.influxdb.tls.certresolver=letsencrypt"

  # Message Broker MQTT
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: mosquitto-traffeyere
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./config/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    networks:
      - backend
      - iot_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mqtt.rule=Host(`mqtt.${DOMAIN_ROOT}`)"
      - "traefik.http.routers.mqtt.tls=true"
      - "traefik.http.routers.mqtt.tls.certresolver=letsencrypt"
      - "traefik.http.services.mqtt.loadbalancer.server.port=9001"

  # Backend FastAPI (sera buildé par Coolify)
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend-traffeyere
    environment:
      # Base de données
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-station_traffeyere}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # InfluxDB
      INFLUX_URL: http://influxdb:8086
      INFLUX_TOKEN: ${INFLUX_ADMIN_TOKEN}
      INFLUX_ORG: ${INFLUX_ORG:-traffeyere}
      INFLUX_BUCKET: ${INFLUX_BUCKET:-iot_sensors}
      
      # Application
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      ENVIRONMENT: production
      DEBUG: "false"
      
      # MQTT
      MQTT_BROKER_HOST: mosquitto
      MQTT_BROKER_PORT: 1883
      MQTT_USERNAME: ${MQTT_USERNAME:-iot_user}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
      
      # Configuration métier
      STATION_ID: ${STATION_ID:-TRAFFEYERE_001}
      STATION_NAME: ${STATION_NAME:-Station Traffeyère}
      STATION_LOCATION: ${STATION_LOCATION:-45.764043,4.835659}
    volumes:
      - backend_logs:/app/logs
      - backend_models:/app/models
      - backend_uploads:/app/uploads
    ports:
      - "8000:8000"
    networks:
      - backend
      - iot_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN_ROOT}`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Next.js (sera buildé par Coolify)  
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=https://api.${DOMAIN_ROOT}
        - NEXT_PUBLIC_WS_URL=wss://ws.${DOMAIN_ROOT}
        - NEXT_PUBLIC_MQTT_WS_URL=wss://mqtt.${DOMAIN_ROOT}
    container_name: frontend-traffeyere
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.${DOMAIN_ROOT}
      NEXT_PUBLIC_WS_URL: wss://ws.${DOMAIN_ROOT}
      NEXT_PUBLIC_MQTT_WS_URL: wss://mqtt.${DOMAIN_ROOT}
      NEXT_PUBLIC_ENVIRONMENT: production
    ports:
      - "3000:3000"
    networks:
      - frontend
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`${DOMAIN_ROOT}`) || Host(`www.${DOMAIN_ROOT}`) || Host(`app.${DOMAIN_ROOT}`)"
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.routers.app.tls.certresolver=letsencrypt"
      - "traefik.http.services.app.loadbalancer.server.port=3000"
      # Redirect www to non-www
      - "traefik.http.middlewares.www-redirect.redirectregex.regex=^https://www.(.*)"
      - "traefik.http.middlewares.www-redirect.redirectregex.replacement=https://$${1}"
      - "traefik.http.routers.app.middlewares=www-redirect"

  # Monitoring Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-traffeyere
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_DOMAIN: grafana.${DOMAIN_ROOT}
      GF_SERVER_ROOT_URL: https://grafana.${DOMAIN_ROOT}
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: grafana
      GF_DATABASE_PASSWORD: ${GRAFANA_DB_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    networks:
      - backend
      - frontend
    restart: unless-stopped
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_ROOT}`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
  backend_logs:
    driver: local
  backend_models:
    driver: local
  backend_uploads:
    driver: local
  grafana_data:
    driver: local

networks:
  backend:
    driver: bridge
    internal: false
  frontend:
    driver: bridge
    internal: false  
  iot_network:
    driver: bridge
    internal: false
version: '3.8'

# Architecture Zero-Trust simplifiée pour tests
# Station Traffeyère - RNCP 39394 Semaine 5

x-common-security: &common-security
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

services:

  # ═══════════════════════════════════════════════════════════════
  # 🌐 DMZ PUBLIQUE - Load Balancer Traefik
  # ═══════════════════════════════════════════════════════════════
  
  traefik:
    image: traefik:v3.0
    container_name: zt-traefik-lb
    <<: *common-security
    command:
      - --api.dashboard=true
      - --api.debug=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=dmz_public
      - --log.level=INFO
      - --accesslog=true
      - --metrics.prometheus=true
    ports:
      - "8000:80"
      - "8443:443"
      - "8081:8080"  # Dashboard Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/data
      - ./security/traefik:/etc/traefik:ro
    networks:
      - dmz_public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.api.service=api@internal"

  # ═══════════════════════════════════════════════════════════════
  # 🏭 ZONE CAPTEURS IoT - Générateur sécurisé
  # ═══════════════════════════════════════════════════════════════
  
  iot-data-generator:
    image: python:3.11-alpine
    container_name: zt-iot-generator
    <<: *common-security
    working_dir: /app
    command: ["sh", "-c", "pip install --no-cache-dir -r requirements.txt && python scripts/iot_data_generator.py"]
    volumes:
      - .:/app:ro
      - iot_data:/app/data
    networks:
      - zone_capteurs
      - monitoring
    environment:
      - CRYPTO_ENABLED=true
      - LORAWAN_AES_KEY=${LORAWAN_AES_KEY}
      - STATION_ID=127
    ports:
      - "8092:8090"  # Métriques Prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8090/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Edge AI Engine sécurisé
  edge-ai-engine:
    image: python:3.11-alpine
    container_name: zt-edge-ai
    <<: *common-security
    working_dir: /app
    command: ["sh", "-c", "pip install --no-cache-dir -r requirements.txt && python scripts/edge_ai_engine.py"]
    volumes:
      - .:/app:ro
      - ai_models:/app/models
    networks:
      - zone_capteurs
      - ai_inference
      - monitoring
    environment:
      - MODEL_ENCRYPTION=true
      - TLS_ENABLED=false  # Simplifié pour tests
    ports:
      - "8093:8091"  # Métriques Prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8091/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ═══════════════════════════════════════════════════════════════
  # 🔒 CŒUR MÉTIER - Base de données sécurisée
  # ═══════════════════════════════════════════════════════════════
  
  postgres-secure:
    image: postgres:15-alpine
    container_name: zt-postgres
    <<: *common-security
    environment:
      POSTGRES_DB: station_traffeyere
      POSTGRES_USER: station_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Sécurité renforcée
      POSTGRES_INITDB_ARGS: "--data-checksums --auth-method=scram-sha-256"
    volumes:
      - postgres_secure_data:/var/lib/postgresql/data
      - ./security/postgres:/docker-entrypoint-initdb.d:ro
    networks:
      - core_business
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U station_user -d station_traffeyere"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis-secure:
    image: redis:7.2-alpine
    container_name: zt-redis
    <<: *common-security
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_secure_data:/data
    networks:
      - core_business
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ═══════════════════════════════════════════════════════════════
  # 📊 MONITORING SÉCURISÉ
  # ═══════════════════════════════════════════════════════════════
  
  prometheus-secure:
    image: prom/prometheus:v2.48.0
    container_name: zt-prometheus
    <<: *common-security
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_secure_data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules-prometheus.yaml:/etc/prometheus/rules-prometheus.yaml:ro
    networks:
      - monitoring
      - app_frontend
    ports:
      - "9091:9090"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app_frontend"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  grafana-secure:
    image: grafana/grafana:10.2.0
    container_name: zt-grafana
    <<: *common-security
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SERVER_ROOT_URL: http://grafana.localhost
      GF_SECURITY_ALLOW_EMBEDDING: true
      # Sécurité renforcée
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_USERS_ALLOW_SIGN_UP: false
      GF_USERS_ALLOW_ORG_CREATE: false
      GF_AUTH_ANONYMOUS_ENABLED: false
    volumes:
      - grafana_secure_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring
      - app_frontend
      - core_business
    depends_on:
      - prometheus-secure
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app_frontend"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

# ═══════════════════════════════════════════════════════════════
# 💾 VOLUMES PERSISTANTS CHIFFRÉS
# ═══════════════════════════════════════════════════════════════

volumes:
  traefik_data:
    driver: local
  iot_data:
    driver: local
  ai_models:
    driver: local
  postgres_secure_data:
    driver: local
  redis_secure_data:
    driver: local
  prometheus_secure_data:
    driver: local
  grafana_secure_data:
    driver: local

# ═══════════════════════════════════════════════════════════════
# 🌐 MICRO-SEGMENTATION RÉSEAU ZERO-TRUST
# ═══════════════════════════════════════════════════════════════

networks:
  # DMZ publique - Accès externe contrôlé
  dmz_public:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.1.0.0/24
          gateway: 10.1.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    labels:
      zone: "dmz_public"
      security_level: "medium"
  
  # Zone capteurs IoT - Réseau isolé
  zone_capteurs:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.2.0.0/24
          gateway: 10.2.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    labels:
      zone: "zone_capteurs"
      security_level: "high"
  
  # Cœur métier - Services critiques
  core_business:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.3.0.0/24
          gateway: 10.3.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    internal: true  # Isolation complète
    labels:
      zone: "core_business"
      security_level: "critical"
  
  # Frontend applications
  app_frontend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.4.0.0/24
          gateway: 10.4.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    labels:
      zone: "app_frontend"
      security_level: "medium"
  
  # IA/ML inference
  ai_inference:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.5.0.0/24
          gateway: 10.5.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    internal: true
    labels:
      zone: "ai_inference"
      security_level: "high"
  
  # Monitoring et observabilité
  monitoring:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.6.0.0/24
          gateway: 10.6.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
    labels:
      zone: "monitoring"
      security_level: "medium"

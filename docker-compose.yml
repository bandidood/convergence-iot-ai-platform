version: '3.8'

services:
  # PostgreSQL sécurisé avec TimescaleDB
  postgres:
    image: timescale/timescaledb:2.14.2-pg15
    container_name: station-postgres
    environment:
      POSTGRES_DB: station_traffeyere
      POSTGRES_USER: station_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ChangeMeInProduction123!}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./core/iot-data-generator/output:/data/iot:ro
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U station_user -d station_traffeyere"]
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # Redis cache sécurisé
  redis:
    image: redis:7.2-alpine
    container_name: station-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-ChangeMeInProduction123!} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # InfluxDB pour métriques temps réel
  influxdb:
    image: influxdb:2.7-alpine
    container_name: station-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD:-ChangeMeInProduction123!}
      DOCKER_INFLUXDB_INIT_ORG: station-traffeyere
      DOCKER_INFLUXDB_INIT_BUCKET: iot-metrics
    volumes:
      - influxdb_data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO pour stockage objets sécurisé
  minio:
    image: minio/minio:RELEASE.2024-01-28T22-35-53Z
    container_name: station-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-ChangeMeInProduction123!}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana pour monitoring
  grafana:
    image: grafana/grafana:10.2.0
    container_name: station-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  minio_data:
    driver: local
  grafana_data:
    driver: local

networks:
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  iot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

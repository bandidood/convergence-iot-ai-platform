# =============================================================================
# CONFIGURATION COOLIFY - Station Traffeyère IoT/AI Platform
# Pour déploiement sur serveur Ubuntu avec Coolify déjà installé
# =============================================================================

# Informations du projet
name: station-traffeyere-iot-platform
description: "Plateforme IoT/AI Station Traffeyère avec backend FastAPI et frontend Next.js"
environment: production

# =============================================================================
# SERVICES À DÉPLOYER VIA COOLIFY
# =============================================================================

services:
  # Base de données PostgreSQL
  postgres:
    type: postgresql
    image: postgres:15-alpine
    name: postgres-traffeyere
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER} 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    memory: 512
    cpu: 0.5
    ports:
      - "5432:5432"
    healthcheck:
      enabled: true
      interval: "30s"
      timeout: "10s"
      retries: "3"
      command: "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"

  # Cache Redis
  redis:
    type: redis
    image: redis:7-alpine
    name: redis-traffeyere
    command: "redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes"
    volumes:
      - redis_data:/data
    memory: 256
    cpu: 0.25
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}

  # Base de données temporelle InfluxDB
  influxdb:
    type: service
    image: influxdb:2.7-alpine
    name: influxdb-traffeyere
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUX_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUX_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUX_BUCKET}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_ADMIN_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    memory: 512
    cpu: 0.5
    domains:
      - "influx.${DOMAIN_ROOT}"
    ports:
      - "8086:8086"

  # Message Broker MQTT
  mosquitto:
    type: service
    image: eclipse-mosquitto:2.0
    name: mosquitto-traffeyere
    volumes:
      - ./config/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./config/mosquitto/pwfile:/mosquitto/config/pwfile
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    memory: 128
    cpu: 0.25
    ports:
      - "1883:1883"  # MQTT
      - "9001:9001"  # WebSocket
    domains:
      - "mqtt.${DOMAIN_ROOT}"

  # Backend FastAPI
  backend:
    type: application
    source:
      type: git
      repository: ${GIT_REPOSITORY_URL}
      branch: master
      dockerfile: ./backend/Dockerfile
    name: backend-traffeyere
    build_command: "docker build -f backend/Dockerfile -t backend-traffeyere ."
    environment:
      # Base de données
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # InfluxDB
      INFLUX_URL: http://influxdb:8086
      INFLUX_TOKEN: ${INFLUX_ADMIN_TOKEN}
      INFLUX_ORG: ${INFLUX_ORG}
      INFLUX_BUCKET: ${INFLUX_BUCKET}
      
      # Application
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      ENVIRONMENT: production
      DEBUG: "false"
      
      # MQTT
      MQTT_BROKER_HOST: mosquitto
      MQTT_BROKER_PORT: 1883
      MQTT_USERNAME: ${MQTT_USERNAME}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
      
      # API IA
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      
      # Configuration métier
      STATION_ID: ${STATION_ID}
      STATION_NAME: ${STATION_NAME}
      STATION_LOCATION: ${STATION_LOCATION}
    volumes:
      - backend_logs:/app/logs
      - backend_models:/app/models
      - backend_uploads:/app/uploads
    memory: 1024
    cpu: 1.0
    domains:
      - "api.${DOMAIN_ROOT}"
    ports:
      - "8000:8000"
    healthcheck:
      enabled: true
      interval: "30s"
      timeout: "10s"
      retries: "3"
      command: "curl -f http://localhost:8000/health"

  # Frontend Next.js
  frontend:
    type: application
    source:
      type: git
      repository: ${https://github.com/bandidood/convergence-iot-ai-platform.git}
      branch: master
      dockerfile: ./frontend/Dockerfile
    name: frontend-traffeyere
    build_command: "docker build -f frontend/Dockerfile --build-arg NEXT_PUBLIC_API_URL=https://api.${DOMAIN_ROOT} -t frontend-traffeyere ."
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.${DOMAIN_ROOT}
      NEXT_PUBLIC_WS_URL: wss://ws.${DOMAIN_ROOT}
      NEXT_PUBLIC_MQTT_WS_URL: wss://mqtt.${DOMAIN_ROOT}
      NEXT_PUBLIC_ENVIRONMENT: production
    memory: 512
    cpu: 0.5
    domains:
      - "${DOMAIN_ROOT}"
      - "www.${DOMAIN_ROOT}"
      - "app.${DOMAIN_ROOT}"
    ports:
      - "3000:3000"

  # Monitoring Prometheus
  prometheus:
    type: service
    image: prom/prometheus:latest
    name: prometheus-traffeyere
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://metrics.${DOMAIN_ROOT}'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    memory: 256
    cpu: 0.25
    domains:
      - "metrics.${DOMAIN_ROOT}"
    ports:
      - "9090:9090"

  # Monitoring Grafana
  grafana:
    type: service
    image: grafana/grafana:latest
    name: grafana-traffeyere
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_DOMAIN: grafana.${DOMAIN_ROOT}
      GF_SERVER_ROOT_URL: https://grafana.${DOMAIN_ROOT}
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: grafana
      GF_DATABASE_PASSWORD: ${GRAFANA_DB_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    memory: 256
    cpu: 0.25
    domains:
      - "grafana.${DOMAIN_ROOT}"
    ports:
      - "3001:3000"

# =============================================================================
# CONFIGURATION RÉSEAU ET VOLUMES
# =============================================================================

volumes:
  postgres_data: {}
  redis_data: {}
  influxdb_data: {}
  influxdb_config: {}
  mosquitto_data: {}
  mosquitto_logs: {}
  backend_logs: {}
  backend_models: {}
  backend_uploads: {}
  prometheus_data: {}
  grafana_data: {}

# =============================================================================
# CONFIGURATION SSL ET DOMAINES
# =============================================================================

domains:
  main: ${DOMAIN_ROOT}
  api: api.${DOMAIN_ROOT}
  app: app.${DOMAIN_ROOT}
  grafana: grafana.${DOMAIN_ROOT}
  metrics: metrics.${DOMAIN_ROOT}
  mqtt: mqtt.${DOMAIN_ROOT}
  influx: influx.${DOMAIN_ROOT}

ssl:
  enabled: true
  provider: letsencrypt
  email: ${ACME_EMAIL}

# =============================================================================
# ORDRE DE DÉPLOIEMENT
# =============================================================================

deploy_order:
  1: [postgres, redis, influxdb]
  2: [mosquitto]
  3: [backend]
  4: [frontend]
  5: [prometheus, grafana]

# =============================================================================
# CONFIGURATION DE SAUVEGARDE
# =============================================================================

backup:
  enabled: true
  schedule: "0 2 * * *"  # Tous les jours à 2h du matin
  retention: 7  # 7 jours
  targets:
    - postgres_data
    - influxdb_data
    - grafana_data
    - backend_models
# =============================================================================
# DOCKER COMPOSE COOLIFY NO PORTS - Station Traffeyère IoT/AI Platform
# Configuration Coolify sans ports exposés (reverse proxy auto) - RNCP 39394
# =============================================================================

services:
  # Base de données PostgreSQL + TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-station_traffeyere}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 120s
      timeout: 30s
      retries: 3
      start_period: 120s

  # Cache Redis (sans authentification pour éviter les erreurs)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 120s
      timeout: 30s
      retries: 3
      start_period: 60s

  # Base de données temporelle InfluxDB
  influxdb:
    image: influxdb:2.7-alpine
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUX_USERNAME:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASSWORD:-changeme123}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUX_ORG:-traffeyere}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUX_BUCKET:-iot_sensors}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_ADMIN_TOKEN:-changeme-token-123}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2

  # Message Broker MQTT (configuration simple)
  mosquitto:
    image: eclipse-mosquitto:2.0
    restart: unless-stopped
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    command: |
      sh -c "
      mkdir -p /mosquitto/config &&
      echo 'listener 1883' > /mosquitto/config/mosquitto.conf &&
      echo 'allow_anonymous true' >> /mosquitto/config/mosquitto.conf &&
      echo 'persistence true' >> /mosquitto/config/mosquitto.conf &&
      echo 'persistence_location /mosquitto/data/' >> /mosquitto/config/mosquitto.conf &&
      mosquitto -c /mosquitto/config/mosquitto.conf
      "

  # Backend FastAPI
  backend:
    build:
      context: .
      dockerfile: ./services/backend/Dockerfile
    restart: unless-stopped
    environment:
      # Projet RNCP 39394
      PROJECT_NAME: "Station Traffeyère IoT/AI Platform"
      PROJECT_VERSION: "1.0.0"
      RNCP_CODE: "39394"
      
      # Base de données
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/${POSTGRES_DB:-station_traffeyere}
      
      # Redis (sans mot de passe)
      REDIS_URL: redis://redis:6379/0
      
      # InfluxDB
      INFLUX_URL: http://influxdb:8086
      INFLUX_TOKEN: ${INFLUX_ADMIN_TOKEN:-changeme-token-123}
      INFLUX_ORG: ${INFLUX_ORG:-traffeyere}
      INFLUX_BUCKET: ${INFLUX_BUCKET:-iot_sensors}
      
      # Application
      SECRET_KEY: ${SECRET_KEY:-changeme-secret-key-123}
      JWT_SECRET: ${JWT_SECRET:-changeme-jwt-secret-123}
      ENVIRONMENT: production
      DEBUG: "false"
      
      # MQTT
      MQTT_BROKER_HOST: mosquitto
      MQTT_BROKER_PORT: 1883
      MQTT_USERNAME: ${MQTT_USERNAME:-iot_user}
      MQTT_PASSWORD: ${MQTT_PASSWORD:-changeme123}
      
      # Configuration métier
      STATION_ID: ${STATION_ID:-TRAFFEYERE_001}
      STATION_NAME: ${STATION_NAME:-Station Traffeyère}
      STATION_LOCATION: ${STATION_LOCATION:-45.764043,4.835659}
    volumes:
      - backend_logs:/app/logs
      - backend_models:/app/models
      - backend_uploads:/app/uploads
    # Pas de ports - Coolify gère le reverse proxy automatiquement
    depends_on:
      - postgres
      - redis

  # Frontend React statique
  frontend:
    build:
      context: .
      dockerfile: ./services/frontend/Dockerfile
    restart: unless-stopped
    # Pas de ports - Coolify gère le reverse proxy automatiquement
    depends_on:
      - backend

# Volumes persistants
volumes:
  postgres_data:
  redis_data:
  influxdb_data:
  influxdb_config:
  mosquitto_data:
  mosquitto_logs:
  backend_logs:
  backend_models:
  backend_uploads:
version: '3.8'

# =============================================================================
# PRODUCTION STACK - Station Traffeyère IoT/AI Platform
# Déploiement Coolify avec domaines et SSL automatique
# =============================================================================

services:
  # ============================================================================
  # REVERSE PROXY & SSL TERMINATION
  # ============================================================================
  traefik:
    image: traefik:v3.0
    container_name: traefik-traffeyere
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard Traefik
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-ssl-certs:/letsencrypt
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_ROOT}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # ============================================================================
  # DATABASE STACK
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: postgres-traffeyere
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-station_traffeyere}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-station_traffeyere}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Time-series database pour IoT
  influxdb:
    image: influxdb:2.7-alpine
    container_name: influxdb-traffeyere
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUX_USERNAME:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUX_ORG:-traffeyere}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUX_BUCKET:-iot_sensors}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_ADMIN_TOKEN}
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.influxdb.rule=Host(`influx.${DOMAIN_ROOT}`)"
      - "traefik.http.routers.influxdb.tls=true"
      - "traefik.http.routers.influxdb.tls.certresolver=letsencrypt"
      - "traefik.http.services.influxdb.loadbalancer.server.port=8086"

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: redis-traffeyere
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # MESSAGE BROKER
  # ============================================================================
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: mosquitto-traffeyere
    restart: unless-stopped
    ports:
      - "1883:1883"  # MQTT
      - "9001:9001"  # WebSocket
    volumes:
      - ./config/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./config/mosquitto/pwfile:/mosquitto/config/pwfile
      - mosquitto-data:/mosquitto/data
      - mosquitto-logs:/mosquitto/log
    networks:
      - backend
      - iot-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mqtt-ws.rule=Host(`mqtt.${DOMAIN_ROOT}`)"
      - "traefik.http.routers.mqtt-ws.tls=true"
      - "traefik.http.routers.mqtt-ws.tls.certresolver=letsencrypt"
      - "traefik.http.services.mqtt-ws.loadbalancer.server.port=9001"

  # ============================================================================
  # BACKEND APPLICATION
  # ============================================================================
  backend:
    build:
      context: ./services/backend
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    container_name: backend-traffeyere
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-station_traffeyere}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # InfluxDB
      INFLUX_URL: http://influxdb:8086
      INFLUX_TOKEN: ${INFLUX_ADMIN_TOKEN}
      INFLUX_ORG: ${INFLUX_ORG:-traffeyere}
      INFLUX_BUCKET: ${INFLUX_BUCKET:-iot_sensors}
      
      # Application
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      ENVIRONMENT: production
      DEBUG: "false"
      
      # MQTT
      MQTT_BROKER_HOST: mosquitto
      MQTT_BROKER_PORT: 1883
      MQTT_USERNAME: ${MQTT_USERNAME}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
      
      # External APIs (AI Providers)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      PROMETHEUS_MULTIPROC_DIR: /tmp/prometheus_multiproc
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_started
      mosquitto:
        condition: service_started
    volumes:
      - backend-logs:/app/logs
      - backend-uploads:/app/uploads
      - backend-models:/app/models
    networks:
      - backend
      - iot-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN_ROOT}`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      # WebSocket pour temps réel
      - "traefik.http.routers.ws.rule=Host(`ws.${DOMAIN_ROOT}`)"
      - "traefik.http.routers.ws.tls=true"
      - "traefik.http.routers.ws.tls.certresolver=letsencrypt"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================================================
  # FRONTEND APPLICATION
  # ============================================================================
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - REACT_APP_API_URL=https://api.${DOMAIN_ROOT}
        - REACT_APP_WS_URL=wss://ws.${DOMAIN_ROOT}
        - REACT_APP_MQTT_WS_URL=wss://mqtt.${DOMAIN_ROOT}
        - REACT_APP_ENVIRONMENT=production
    container_name: frontend-traffeyere
    restart: unless-stopped
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`${DOMAIN_ROOT}`) || Host(`www.${DOMAIN_ROOT}`)"
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.routers.app.tls.certresolver=letsencrypt"
      - "traefik.http.services.app.loadbalancer.server.port=80"
      # Redirect www to non-www
      - "traefik.http.middlewares.www-redirect.redirectregex.regex=^https://www.(.*)"
      - "traefik.http.middlewares.www-redirect.redirectregex.replacement=https://$${1}"
      - "traefik.http.routers.app.middlewares=www-redirect"

  # ============================================================================
  # MONITORING STACK
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-traffeyere
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://metrics.${DOMAIN_ROOT}'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - monitoring
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.metrics.rule=Host(`metrics.${DOMAIN_ROOT}`)"
      - "traefik.http.routers.metrics.tls=true"
      - "traefik.http.routers.metrics.tls.certresolver=letsencrypt"
      - "traefik.http.services.metrics.loadbalancer.server.port=9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-traffeyere
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_DOMAIN: grafana.${DOMAIN_ROOT}
      GF_SERVER_ROOT_URL: https://grafana.${DOMAIN_ROOT}
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: grafana
      GF_DATABASE_PASSWORD: ${GRAFANA_DB_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring
      - backend
    depends_on:
      - prometheus
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_ROOT}`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # ============================================================================
  # UTILITY SERVICES
  # ============================================================================
  # Backup automatique
  backup:
    image: prodrigestivill/postgres-backup-local:15
    container_name: backup-traffeyere
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-station_traffeyere}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_EXTRA_OPTS: -Z9 --schema=public --blobs
      SCHEDULE: "@daily"
      BACKUP_KEEP_DAYS: 7
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 6
    volumes:
      - backup-data:/backups
    networks:
      - backend
    depends_on:
      - postgres

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  # Database
  postgres-data:
    driver: local
  influxdb-data:
    driver: local
  influxdb-config:
    driver: local
  redis-data:
    driver: local
  
  # Message Broker
  mosquitto-data:
    driver: local
  mosquitto-logs:
    driver: local
  
  # Application
  backend-logs:
    driver: local
  backend-uploads:
    driver: local
  backend-models:
    driver: local
  
  # Monitoring
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  
  # SSL & Proxy
  traefik-ssl-certs:
    driver: local
  
  # Backup
  backup-data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  traefik-public:
    external: true
  backend:
    driver: bridge
    internal: false
  iot-network:
    driver: bridge
    internal: false
  monitoring:
    driver: bridge
    internal: false
# Script PKI simplifi√© pour Station Traffey√®re Zero-Trust
# Conforme RNCP 39394 - Semaine 5

Write-Host "üîê G√©n√©ration PKI Zero-Trust - RNCP 39394" -ForegroundColor Green
Write-Host "===========================================" -ForegroundColor Green

# Ajouter System.Web pour la g√©n√©ration de mots de passe
Add-Type -AssemblyName System.Web

# 1. G√©n√©rer les secrets n√©cessaires
Write-Host "`n1Ô∏è‚É£ G√©n√©ration des secrets s√©curis√©s" -ForegroundColor Magenta

$Secrets = @{
    "postgres_password" = [System.Web.Security.Membership]::GeneratePassword(32, 8)
    "postgres_tde_key" = [System.Web.Security.Membership]::GeneratePassword(64, 16)
    "keycloak_db_password" = [System.Web.Security.Membership]::GeneratePassword(32, 8)
    "keycloak_admin_password" = [System.Web.Security.Membership]::GeneratePassword(24, 6)
    "grafana_admin_password" = [System.Web.Security.Membership]::GeneratePassword(24, 6)
    "grafana_oauth_secret" = [System.Web.Security.Membership]::GeneratePassword(48, 12)
    "redis_password" = [System.Web.Security.Membership]::GeneratePassword(32, 8)
    "lorawan_aes_key" = [System.Web.Security.Membership]::GeneratePassword(32, 8)
}

foreach ($SecretName in $Secrets.Keys) {
    $SecretFile = "secrets\$SecretName.txt"
    $SecretValue = $Secrets[$SecretName]
    $SecretValue | Out-File -FilePath $SecretFile -Encoding UTF8 -NoNewline
    Write-Host "üîê Secret cr√©√©: $SecretName" -ForegroundColor Green
}

# 2. Cr√©er un certificat auto-sign√© pour les tests
Write-Host "`n2Ô∏è‚É£ G√©n√©ration certificat auto-sign√© pour tests" -ForegroundColor Magenta

$CertPath = "certs/test-selfsigned.crt"
$KeyPath = "certs/test-selfsigned.key"

try {
    # Utiliser PowerShell pour cr√©er un certificat auto-sign√©
    $Cert = New-SelfSignedCertificate -DnsName @("localhost", "127.0.0.1", "station-traffeyere.local", "*.station-traffeyere.local") -CertStoreLocation "cert:\LocalMachine\My" -KeyAlgorithm RSA -KeyLength 2048 -NotAfter (Get-Date).AddYears(10)
    
    # Exporter le certificat
    Export-Certificate -Cert $Cert -FilePath $CertPath -Type CERT | Out-Null
    
    # Exporter la cl√© priv√©e (pour les tests uniquement)
    $Password = ConvertTo-SecureString -String "StationTraffeyere2024!" -Force -AsPlainText
    Export-PfxCertificate -Cert $Cert -FilePath "certs/test-selfsigned.pfx" -Password $Password | Out-Null
    
    Write-Host "‚úÖ Certificat auto-sign√© cr√©√© pour tests" -ForegroundColor Green
    Write-Host "   Certificat: $CertPath" -ForegroundColor Gray
    Write-Host "   PFX: certs/test-selfsigned.pfx" -ForegroundColor Gray
    
} catch {
    Write-Host "‚ö†Ô∏è  PowerShell certificat non disponible, cr√©ation manuelle requise" -ForegroundColor Yellow
}

# 3. Cr√©er variables d'environnement pour Docker Compose
Write-Host "`n3Ô∏è‚É£ G√©n√©ration fichier .env pour Zero-Trust" -ForegroundColor Magenta

$EnvContent = @"
# Variables d'environnement Zero-Trust - Station Traffey√®re
# G√©n√©r√© automatiquement - RNCP 39394

# Base de donn√©es PostgreSQL
POSTGRES_PASSWORD=$($Secrets["postgres_password"])
POSTGRES_TDE_KEY=$($Secrets["postgres_tde_key"])

# Keycloak OAuth
KEYCLOAK_DB_PASSWORD=$($Secrets["keycloak_db_password"])
KEYCLOAK_ADMIN_PASSWORD=$($Secrets["keycloak_admin_password"])

# Grafana
GRAFANA_ADMIN_PASSWORD=$($Secrets["grafana_admin_password"])
GRAFANA_OAUTH_SECRET=$($Secrets["grafana_oauth_secret"])

# Redis
REDIS_PASSWORD=$($Secrets["redis_password"])

# IoT Security
LORAWAN_AES_KEY=$($Secrets["lorawan_aes_key"])

# Cloudflare (optionnel pour Let's Encrypt)
CF_API_EMAIL=admin@station-traffeyere.local
CF_DNS_API_TOKEN=your_cloudflare_token_here

# Monitoring
PROMETHEUS_PASSWORD=prometheus2024!
ALERTMANAGER_PASSWORD=alertmanager2024!
"@

$EnvContent | Out-File -FilePath ".env.zerotrust" -Encoding UTF8
Write-Host "‚úÖ Fichier .env.zerotrust cr√©√©" -ForegroundColor Green

# 4. Cr√©er configuration Traefik simplifi√©e
Write-Host "`n4Ô∏è‚É£ Configuration Traefik" -ForegroundColor Magenta

$TraefikConfig = @"
# Configuration Traefik dynamique
# Station Traffey√®re Zero-Trust

api:
  dashboard: true
  debug: false

entryPoints:
  web:
    address: ":80"
    http:
      redirections:
        entryPoint:
          to: websecure
          scheme: https
          permanent: true

  websecure:
    address: ":443"

providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false
    network: dmz_public

certificatesResolvers:
  letsencrypt:
    acme:
      tlsChallenge: {}
      email: admin@station-traffeyere.local
      storage: /letsencrypt/acme.json
      httpChallenge:
        entryPoint: web

log:
  level: INFO

accessLog:
  bufferingSize: 100

metrics:
  prometheus:
    addEntryPointsLabels: true
    addServicesLabels: true
"@

$TraefikConfig | Out-File -FilePath "security/traefik/traefik.yml" -Encoding UTF8
Write-Host "‚úÖ Configuration Traefik cr√©√©e" -ForegroundColor Green

# 5. R√©sum√©
Write-Host "`nüéØ INFRASTRUCTURE ZERO-TRUST G√âN√âR√âE" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green

Write-Host "`nüìã √âl√©ments cr√©√©s:" -ForegroundColor Cyan
Write-Host "  ‚úÖ 8 secrets s√©curis√©s" -ForegroundColor Green
Write-Host "  ‚úÖ Certificat auto-sign√© pour tests" -ForegroundColor Green
Write-Host "  ‚úÖ Fichier .env.zerotrust" -ForegroundColor Green  
Write-Host "  ‚úÖ Configuration Traefik" -ForegroundColor Green

Write-Host "`nüöÄ Prochaines √©tapes:" -ForegroundColor Yellow
Write-Host "  1. Copier .env.zerotrust vers .env" -ForegroundColor White
Write-Host "  2. D√©ployer: docker-compose -f docker-compose.zerotrust.yml up -d" -ForegroundColor White
Write-Host "  3. Configurer /etc/hosts pour les domaines locaux" -ForegroundColor White

Write-Host "`nüéâ Infrastructure Zero-Trust pr√™te!" -ForegroundColor Green

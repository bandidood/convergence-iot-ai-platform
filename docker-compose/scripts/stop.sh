#!/bin/bash

# ============================================================================
# SCRIPT D'ARR√äT - Station Traffey√®re IoT/AI Platform
# Arr√™t s√©lectif des microservices par couches
# ============================================================================

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMPOSE_DIR="$(dirname "$SCRIPT_DIR")"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Arr√™t des services par couche
stop_blockchain() {
    log "=== ARR√äT BLOCKCHAIN ==="
    cd "$COMPOSE_DIR"
    
    if docker-compose -f docker-compose.blockchain.yml ps | grep -q "Up"; then
        docker-compose -f docker-compose.blockchain.yml down
        log "Blockchain arr√™t√©e ‚úì"
    else
        info "Blockchain d√©j√† arr√™t√©e"
    fi
}

stop_security() {
    log "=== ARR√äT S√âCURIT√â ==="
    cd "$COMPOSE_DIR"
    
    if docker-compose -f docker-compose.security.yml ps | grep -q "Up"; then
        docker-compose -f docker-compose.security.yml down
        log "S√©curit√© arr√™t√©e ‚úì"
    else
        info "S√©curit√© d√©j√† arr√™t√©e"
    fi
}

stop_iot() {
    log "=== ARR√äT IOT ==="
    cd "$COMPOSE_DIR"
    
    if docker-compose -f docker-compose.iot.yml ps | grep -q "Up"; then
        docker-compose -f docker-compose.iot.yml down
        log "IoT Services arr√™t√©s ‚úì"
    else
        info "IoT Services d√©j√† arr√™t√©s"
    fi
}

stop_monitoring() {
    log "=== ARR√äT MONITORING ==="
    cd "$COMPOSE_DIR"
    
    if docker-compose -f docker-compose.monitoring.yml ps | grep -q "Up"; then
        docker-compose -f docker-compose.monitoring.yml down
        log "Monitoring arr√™t√© ‚úì"
    else
        info "Monitoring d√©j√† arr√™t√©"
    fi
}

stop_application() {
    log "=== ARR√äT APPLICATION ==="
    cd "$COMPOSE_DIR"
    
    if docker-compose -f docker-compose.application.yml ps | grep -q "Up"; then
        docker-compose -f docker-compose.application.yml down
        log "Application arr√™t√©e ‚úì"
    else
        info "Application d√©j√† arr√™t√©e"
    fi
}

stop_infrastructure() {
    log "=== ARR√äT INFRASTRUCTURE ==="
    cd "$COMPOSE_DIR"
    
    if docker-compose -f docker-compose.infrastructure.yml ps | grep -q "Up"; then
        warn "ATTENTION: L'arr√™t de l'infrastructure supprimera l'acc√®s aux donn√©es"
        read -p "Confirmer l'arr√™t de l'infrastructure ? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            docker-compose -f docker-compose.infrastructure.yml down
            log "Infrastructure arr√™t√©e ‚úì"
        else
            info "Arr√™t de l'infrastructure annul√©"
        fi
    else
        info "Infrastructure d√©j√† arr√™t√©e"
    fi
}

# Nettoyage complet
cleanup_all() {
    log "=== NETTOYAGE COMPLET ==="
    cd "$COMPOSE_DIR"
    
    warn "ATTENTION: Cette op√©ration supprimera tous les conteneurs et volumes"
    read -p "Confirmer le nettoyage complet ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Arr√™t de tous les services
        docker-compose -f docker-compose.blockchain.yml down -v 2>/dev/null || true
        docker-compose -f docker-compose.security.yml down -v 2>/dev/null || true
        docker-compose -f docker-compose.iot.yml down -v 2>/dev/null || true
        docker-compose -f docker-compose.monitoring.yml down -v 2>/dev/null || true
        docker-compose -f docker-compose.application.yml down -v 2>/dev/null || true
        docker-compose -f docker-compose.infrastructure.yml down -v 2>/dev/null || true
        
        # Suppression des r√©seaux
        networks=(
            "traffeyere-blockchain"
            "traffeyere-security"
            "traffeyere-monitoring"
            "traffeyere-iot"
            "traffeyere-frontend"
            "traffeyere-backend"
        )
        
        for network in "${networks[@]}"; do
            if docker network ls | grep -q "$network"; then
                docker network rm "$network" 2>/dev/null || true
                log "R√©seau $network supprim√©"
            fi
        done
        
        # Nettoyage des images non utilis√©es
        docker image prune -f
        
        log "Nettoyage complet termin√© ‚úì"
    else
        info "Nettoyage annul√©"
    fi
}

# Arr√™t rapide (tout sauf infrastructure)
quick_stop() {
    log "=== ARR√äT RAPIDE (SANS INFRASTRUCTURE) ==="
    
    stop_blockchain
    stop_security
    stop_iot
    stop_monitoring
    stop_application
    
    log "Arr√™t rapide termin√© ‚úì"
    info "Infrastructure conserv√©e pour pr√©server les donn√©es"
}

# Affichage du statut
show_status() {
    log "=== STATUT DES SERVICES ==="
    cd "$COMPOSE_DIR"
    
    echo
    info "üìä INFRASTRUCTURE:"
    docker-compose -f docker-compose.infrastructure.yml ps 2>/dev/null || echo "Aucun service infrastructure"
    
    echo
    info "üöÄ APPLICATION:"
    docker-compose -f docker-compose.application.yml ps 2>/dev/null || echo "Aucun service application"
    
    echo
    info "üìà MONITORING:"
    docker-compose -f docker-compose.monitoring.yml ps 2>/dev/null || echo "Aucun service monitoring"
    
    echo
    info "üîå IOT:"
    docker-compose -f docker-compose.iot.yml ps 2>/dev/null || echo "Aucun service IoT"
    
    echo
    info "üîí S√âCURIT√â:"
    docker-compose -f docker-compose.security.yml ps 2>/dev/null || echo "Aucun service s√©curit√©"
    
    echo
    info "üîó BLOCKCHAIN:"
    docker-compose -f docker-compose.blockchain.yml ps 2>/dev/null || echo "Aucun service blockchain"
    
    echo
    info "üì° R√âSEAUX:"
    docker network ls | grep traffeyere || echo "Aucun r√©seau Traffey√®re"
}

# Arr√™t avec sauvegarde
stop_with_backup() {
    log "=== ARR√äT AVEC SAUVEGARDE ==="
    
    # Sauvegarde des donn√©es critiques
    BACKUP_DIR="${COMPOSE_DIR}/../backups/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    log "Sauvegarde en cours vers $BACKUP_DIR..."
    
    # Sauvegarde PostgreSQL
    if docker ps | grep -q traffeyere-postgres; then
        docker exec traffeyere-postgres pg_dumpall -U postgres > "$BACKUP_DIR/postgres_backup.sql"
        log "Sauvegarde PostgreSQL ‚úì"
    fi
    
    # Sauvegarde Redis
    if docker ps | grep -q traffeyere-redis; then
        docker exec traffeyere-redis redis-cli -a "$REDIS_PASSWORD" --rdb /tmp/dump.rdb 2>/dev/null || true
        docker cp traffeyere-redis:/tmp/dump.rdb "$BACKUP_DIR/redis_backup.rdb" 2>/dev/null || true
        log "Sauvegarde Redis ‚úì"
    fi
    
    # Copie des volumes importants
    if docker volume ls | grep -q prometheus_data; then
        docker run --rm -v prometheus_data:/data -v "$BACKUP_DIR":/backup alpine tar czf /backup/prometheus_data.tar.gz -C /data .
        log "Sauvegarde Prometheus ‚úì"
    fi
    
    # Arr√™t normal
    quick_stop
    
    log "Sauvegarde termin√©e: $BACKUP_DIR"
}

# Red√©marrage d'un service sp√©cifique
restart_service() {
    local service=$1
    local compose_file=""
    
    case $service in
        postgres|redis|influxdb|minio|mosquitto)
            compose_file="docker-compose.infrastructure.yml"
            ;;
        backend|edge-ai-engine|frontend|xai-dashboard)
            compose_file="docker-compose.application.yml"
            ;;
        prometheus|grafana|alertmanager)
            compose_file="docker-compose.monitoring.yml"
            ;;
        iot-data-generator|secure-station-simulator)
            compose_file="docker-compose.iot.yml"
            ;;
        elasticsearch|kibana|soc-dashboard)
            compose_file="docker-compose.security.yml"
            ;;
        orderer*|peer*|blockchain-api-gateway)
            compose_file="docker-compose.blockchain.yml"
            ;;
        *)
            error "Service non reconnu: $service"
            ;;
    esac
    
    if [[ -n "$compose_file" ]]; then
        cd "$COMPOSE_DIR"
        log "Red√©marrage de $service..."
        docker-compose -f "$compose_file" restart "$service"
        log "$service red√©marr√© ‚úì"
    fi
}

# Affichage de l'aide
show_help() {
    cat << EOF
Usage: $0 [OPTIONS]

Options:
    --all               Arr√™t complet (toutes les couches)
    --infrastructure    Arr√™t infrastructure
    --application       Arr√™t application
    --monitoring        Arr√™t monitoring
    --iot              Arr√™t IoT
    --security         Arr√™t s√©curit√©
    --blockchain       Arr√™t blockchain
    --quick            Arr√™t rapide (sans infrastructure)
    --cleanup          Nettoyage complet (supprime volumes)
    --backup           Arr√™t avec sauvegarde des donn√©es
    --status           Affichage du statut
    --restart SERVICE   Red√©marrage d'un service sp√©cifique
    --help             Afficher cette aide

Exemples:
    $0 --quick                   # Arr√™t rapide (garde l'infrastructure)
    $0 --application --iot       # Arr√™t application et IoT seulement
    $0 --backup                  # Arr√™t avec sauvegarde
    $0 --cleanup                 # Nettoyage complet
    $0 --restart backend         # Red√©marrage du backend
    $0 --status                  # Affichage du statut

EOF
}

# Gestion des arguments
if [[ $# -eq 0 ]]; then
    show_help
    exit 1
fi

while [[ $# -gt 0 ]]; do
    case $1 in
        --all)
            stop_blockchain
            stop_security
            stop_iot
            stop_monitoring
            stop_application
            stop_infrastructure
            shift
            ;;
        --quick)
            quick_stop
            shift
            ;;
        --infrastructure)
            stop_infrastructure
            shift
            ;;
        --application)
            stop_application
            shift
            ;;
        --monitoring)
            stop_monitoring
            shift
            ;;
        --iot)
            stop_iot
            shift
            ;;
        --security)
            stop_security
            shift
            ;;
        --blockchain)
            stop_blockchain
            shift
            ;;
        --cleanup)
            cleanup_all
            shift
            ;;
        --backup)
            stop_with_backup
            shift
            ;;
        --status)
            show_status
            shift
            ;;
        --restart)
            shift
            if [[ $# -gt 0 ]]; then
                restart_service "$1"
                shift
            else
                error "Service manquant pour --restart"
            fi
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            error "Option inconnue: $1. Utilisez --help pour l'aide."
            ;;
    esac
done

log "Op√©ration termin√©e"
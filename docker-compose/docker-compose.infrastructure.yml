version: '3.8'

# ============================================================================
# INFRASTRUCTURE LAYER - Station Traffeyère IoT/AI Platform
# Bases de données, cache, stockage, message broker
# ============================================================================

services:
  # Base de données principale PostgreSQL + TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: traffeyere-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-station_traffeyere}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Cache Redis
  redis:
    image: redis:7.2-alpine
    container_name: traffeyere-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --save 900 1 --save 300 10 --save 60 10000
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - backend
      - monitoring-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # InfluxDB pour métriques IoT haute fréquence
  influxdb:
    image: influxdb:2.7-alpine
    container_name: traffeyere-influxdb
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUX_USERNAME:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUX_ORG:-traffeyere}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUX_BUCKET:-iot_sensors}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_ADMIN_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    ports:
      - "8086:8086"
    networks:
      - backend
      - iot_network
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8086/ping"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # MinIO S3 Storage pour modèles IA et logs
  minio:
    image: minio/minio:latest
    container_name: traffeyere-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION_NAME: ${MINIO_REGION:-eu-west-1}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - backend
      - monitoring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # MQTT Broker Eclipse Mosquitto
  mosquitto:
    image: eclipse-mosquitto:2.0.18
    container_name: traffeyere-mosquitto
    restart: unless-stopped
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
      - mosquitto_config:/mosquitto/config
    ports:
      - "1883:1883"
      - "8083:8083"
      - "9001:9001"
    networks:
      - backend
      - iot_network
      - monitoring-network
    healthcheck:
      test: ["CMD", "sh", "-c", "mosquitto_pub -h localhost -p 1883 -t health/check -m ping"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  minio_data:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
  mosquitto_config:
    driver: local

networks:
  backend:
    name: traffeyere-backend
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500
  iot_network:
    name: traffeyere-iot
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500
  monitoring-network:
    name: traffeyere-monitoring
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500
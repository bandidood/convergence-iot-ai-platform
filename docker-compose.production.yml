version: '3.8'

# =============================================================================
# DOCKER COMPOSE COOLIFY OPTIMIZED - Station Traffeyère IoT/AI Platform  
# Configuration de production pour Coolify avec load balancing et haute disponibilité
# =============================================================================

services:
  # =============================================================================
  # INFRASTRUCTURE LAYER - Bases de données et stockage
  # =============================================================================
  
  # PostgreSQL avec TimescaleDB pour les séries temporelles
  postgres:
    image: timescale/timescaledb:2.11.2-pg15
    container_name: postgres-traffeyere
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-station_traffeyere}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - backend
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-station_traffeyere}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "coolify.managed=true"
      - "coolify.type=database"

  # Redis pour cache et sessions
  redis:
    image: redis:7.2-alpine
    container_name: redis-traffeyere
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --appendfsync everysec --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./configurations/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - backend
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 128M
    labels:
      - "coolify.managed=true"
      - "coolify.type=database"

  # InfluxDB v2 pour métriques IoT haute fréquence
  influxdb:
    image: influxdb:2.7-alpine
    container_name: influxdb-traffeyere
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUX_USERNAME:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUX_ORG:-traffeyere}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUX_BUCKET:-iot_sensors}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_ADMIN_TOKEN}
      INFLUXD_STORAGE_ENGINE: tsm1
      INFLUXD_DATA_MAX_SERIES_PER_DATABASE: 10000000
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    ports:
      - "8086:8086"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.2'
          memory: 256M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.influxdb.rule=Host(`influx.johann-lebel.fr`)"
      - "traefik.http.routers.influxdb.tls=true"
      - "traefik.http.routers.influxdb.tls.certresolver=letsencrypt"
      - "traefik.http.services.influxdb.loadbalancer.server.port=8086"
      - "coolify.managed=true"

  # MinIO pour stockage objet S3-compatible (modèles IA, logs, backups)
  minio:
    image: minio/minio:RELEASE.2024-01-01T16-36-33Z
    container_name: minio-traffeyere
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_CONSOLE_ADDRESS: ":9090"
      MINIO_SERVER_URL: https://minio.johann-lebel.fr
    command: server /data --console-address ":9090"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9090:9090"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 128M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio-api.rule=Host(`minio.johann-lebel.fr`)"
      - "traefik.http.routers.minio-api.service=minio-api"
      - "traefik.http.routers.minio-api.tls=true"
      - "traefik.http.routers.minio-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio-console.rule=Host(`minio-console.johann-lebel.fr`)"
      - "traefik.http.routers.minio-console.service=minio-console"
      - "traefik.http.routers.minio-console.tls=true"
      - "traefik.http.routers.minio-console.tls.certresolver=letsencrypt"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9090"
      - "coolify.managed=true"

  # =============================================================================
  # IOT COMMUNICATION LAYER
  # =============================================================================

  # MQTT Broker Eclipse Mosquitto
  mosquitto:
    image: eclipse-mosquitto:2.0.18
    container_name: mosquitto-traffeyere
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "8083:8083"  # WebSocket
    volumes:
      - ./configurations/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./configurations/mosquitto/users:/mosquitto/config/users:ro
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    networks:
      - backend
      - iot_network
    healthcheck:
      test: ["CMD", "mosquitto_sub", "-h", "localhost", "-p", "1883", "-t", "$SYS/broker/uptime", "-C", "1", "-W", "3"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 64M
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.mqtt.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.mqtt.entrypoints=mqtt"
      - "traefik.tcp.routers.mqtt.service=mqtt"
      - "traefik.tcp.services.mqtt.loadbalancer.server.port=1883"
      - "traefik.http.routers.mqtt-ws.rule=Host(`mqtt.johann-lebel.fr`)"
      - "traefik.http.routers.mqtt-ws.tls=true"
      - "traefik.http.routers.mqtt-ws.tls.certresolver=letsencrypt"
      - "traefik.http.services.mqtt-ws.loadbalancer.server.port=8083"
      - "coolify.managed=true"

  # =============================================================================
  # APPLICATION LAYER
  # =============================================================================

  # Backend FastAPI avec Edge AI intégré
  backend:
    build:
      context: .
      dockerfile: ./services/backend/Dockerfile
      args:
        - ENVIRONMENT=production
    container_name: backend-traffeyere
    restart: unless-stopped
    environment:
      # Configuration projet RNCP 39394
      PROJECT_NAME: "Station Traffeyère IoT/AI Platform"
      PROJECT_VERSION: "1.0.0"
      RNCP_CODE: "39394"
      ENVIRONMENT: production
      
      # Base de données
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-station_traffeyere}
      
      # Cache Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # InfluxDB Time Series
      INFLUX_URL: http://influxdb:8086
      INFLUX_TOKEN: ${INFLUX_ADMIN_TOKEN}
      INFLUX_ORG: ${INFLUX_ORG:-traffeyere}
      INFLUX_BUCKET: ${INFLUX_BUCKET:-iot_sensors}
      
      # MinIO/S3
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${MINIO_ROOT_USER}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      S3_BUCKET: ${S3_BUCKET:-traffeyere-data}
      
      # Application sécurité
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      API_KEY: ${API_KEY}
      
      # MQTT
      MQTT_BROKER_HOST: mosquitto
      MQTT_BROKER_PORT: 1883
      MQTT_USERNAME: ${MQTT_USERNAME:-iot_station}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
      
      # Station Configuration
      STATION_ID: ${STATION_ID:-TRAFFEYERE_001}
      STATION_NAME: ${STATION_NAME:-Station Traffeyère}
      STATION_LOCATION: ${STATION_LOCATION:-45.764043,4.835659}
      SENSOR_COUNT: ${SENSOR_COUNT:-127}
      
      # Edge AI Configuration
      AI_MODEL_PATH: /app/models
      AI_INFERENCE_TIMEOUT: 280  # 0.28ms target
      SHAP_ENABLED: true
      ANOMALY_THRESHOLD: 0.85
      
      # APIs externes (optionnelles)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # Monitoring
      PROMETHEUS_ENABLED: true
      LOG_LEVEL: info
      JAEGER_ENABLED: false
      
    volumes:
      - backend_logs:/app/logs
      - backend_models:/app/models
      - backend_uploads:/app/uploads
      - backend_cache:/app/cache
    ports:
      - "8000:8000"
    networks:
      - backend
      - iot_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`backend-station.johann-lebel.fr`) || Host(`api.johann-lebel.fr`)"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      - "traefik.http.services.backend.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.backend.loadbalancer.healthcheck.interval=30s"
      - "coolify.managed=true"
      - "coolify.type=application"

  # Frontend Dashboard React optimisé
  frontend:
    build:
      context: .
      dockerfile: ./services/frontend/Dockerfile
      args:
        - VITE_API_URL=https://backend-station.johann-lebel.fr
        - VITE_WS_URL=wss://backend-station.johann-lebel.fr/ws
        - VITE_GRAFANA_URL=https://grafana.johann-lebel.fr
        - VITE_MQTT_WS_URL=wss://mqtt.johann-lebel.fr
        - VITE_ENVIRONMENT=production
        - VITE_VERSION=1.0.0
    container_name: frontend-traffeyere
    restart: unless-stopped
    environment:
      NGINX_WORKER_PROCESSES: auto
      NGINX_WORKER_CONNECTIONS: 1024
    ports:
      - "3000:80"
    networks:
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthz"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`frontend-station.johann-lebel.fr`) || Host(`traffeyere.johann-lebel.fr`) || Host(`www.traffeyere.johann-lebel.fr`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.services.frontend.loadbalancer.healthcheck.path=/healthz"
      # Middleware de redirection www
      - "traefik.http.middlewares.www-redirect.redirectregex.regex=^https://www.(.*)"
      - "traefik.http.middlewares.www-redirect.redirectregex.replacement=https://$${1}"
      - "traefik.http.routers.frontend.middlewares=www-redirect@docker"
      - "coolify.managed=true"
      - "coolify.type=application"

  # =============================================================================
  # IOT SIMULATION LAYER
  # =============================================================================

  # Générateur IoT pour 127 capteurs
  iot-generator:
    build:
      context: .
      dockerfile: ./core/iot-data-generator/Dockerfile
    container_name: iot-generator-traffeyere
    restart: unless-stopped
    environment:
      SENSOR_COUNT: ${SENSOR_COUNT:-127}
      MQTT_BROKER_HOST: mosquitto
      MQTT_BROKER_PORT: 1883
      MQTT_USERNAME: ${MQTT_USERNAME}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
      STATION_ID: ${STATION_ID:-TRAFFEYERE_001}
      PUBLISH_INTERVAL: 5  # 0.2 Hz = 5 secondes
      ANOMALY_PROBABILITY: 0.05  # 5% chance d'anomalie
      SIMULATION_SPEED: 1.0
    networks:
      - iot_network
    depends_on:
      mosquitto:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 128M
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health').raise_for_status()"]
      interval: 60s
      timeout: 10s
      retries: 3
    labels:
      - "coolify.managed=true"
      - "coolify.type=service"

  # Edge AI Engine séparé pour performances optimales
  edge-ai:
    build:
      context: .
      dockerfile: ./core/edge-ai-engine/Dockerfile
    container_name: edge-ai-traffeyere
    restart: unless-stopped
    environment:
      MODEL_PATH: /app/models
      INFERENCE_TIMEOUT: 280  # 0.28ms
      BATCH_SIZE: 32
      SHAP_ENABLED: true
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      PROMETHEUS_ENABLED: true
    volumes:
      - ai_models:/app/models
      - ai_cache:/app/cache
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    labels:
      - "coolify.managed=true"
      - "coolify.type=service"

  # =============================================================================
  # MONITORING & OBSERVABILITY LAYER
  # =============================================================================

  # Prometheus pour collecte de métriques
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus-traffeyere
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --storage.tsdb.retention.time=30d
      - --storage.tsdb.retention.size=10GB
      - --web.enable-lifecycle
      - --web.enable-admin-api
    volumes:
      - ./configurations/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./configurations/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.2'
          memory: 256M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.johann-lebel.fr`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "coolify.managed=true"
      - "coolify.type=monitoring"

  # Grafana pour dashboards et visualisations
  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana-traffeyere
    restart: unless-stopped
    environment:
      # Configuration admin
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      
      # Configuration serveur
      GF_SERVER_DOMAIN: grafana.johann-lebel.fr
      GF_SERVER_ROOT_URL: https://grafana.johann-lebel.fr
      GF_SERVER_SERVE_FROM_SUB_PATH: false
      
      # Base de données Grafana dans PostgreSQL
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: grafana
      GF_DATABASE_PASSWORD: ${GRAFANA_DB_PASSWORD}
      GF_DATABASE_SSL_MODE: disable
      
      # Branding RNCP
      GF_BRANDING_TITLE: "Station Traffeyère Monitoring Dashboard"
      GF_BRANDING_HEADER: "RNCP 39394 - IoT/AI Platform"
      GF_BRANDING_FAVICON: "public/img/fav32.png"
      
      # Plugins
      GF_INSTALL_PLUGINS: "redis-datasource,influxdb-datasource,prometheus-datasource,grafana-clock-panel,grafana-simple-json-datasource"
      
      # Sécurité
      GF_SECURITY_COOKIE_SECURE: true
      GF_SECURITY_COOKIE_SAMESITE: strict
      GF_SECURITY_CONTENT_TYPE_PROTECTION: true
      GF_SECURITY_X_CONTENT_TYPE_OPTIONS: nosniff
      GF_SECURITY_X_XSS_PROTECTION: true
      
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configurations/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./configurations/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    networks:
      - backend
      - frontend
    depends_on:
      postgres:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.johann-lebel.fr`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "coolify.managed=true"
      - "coolify.type=monitoring"

  # AlertManager pour gestion des alertes
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager-traffeyere
    restart: unless-stopped
    command:
      - --config.file=/etc/alertmanager/alertmanager.yml
      - --storage.path=/alertmanager
      - --web.external-url=https://alerts.johann-lebel.fr
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`alerts.johann-lebel.fr`)"
      - "traefik.http.routers.alertmanager.tls=true"
      - "traefik.http.routers.alertmanager.tls.certresolver=letsencrypt"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"
      - "coolify.managed=true"
      - "coolify.type=monitoring"

# =============================================================================
# VOLUMES - Persistance de données
# =============================================================================
volumes:
  # Bases de données
  postgres_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
    
  # Stockage objet
  minio_data:
    driver: local
    
  # MQTT
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
    
  # Application
  backend_logs:
    driver: local
  backend_models:
    driver: local
  backend_uploads:
    driver: local
  backend_cache:
    driver: local
    
  # IA
  ai_models:
    driver: local
  ai_cache:
    driver: local
    
  # Monitoring
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

# =============================================================================
# NETWORKS - Segmentation réseau
# =============================================================================
networks:
  # Réseau backend pour services internes
  backend:
    driver: bridge
    internal: false
    attachable: true
    
  # Réseau frontend pour interfaces utilisateur
  frontend:
    driver: bridge
    internal: false
    attachable: true
    
  # Réseau IoT pour communication avec capteurs
  iot_network:
    driver: bridge
    internal: false
    attachable: true
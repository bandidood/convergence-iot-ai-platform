# ================================================================
# SCRIPT D√âPLOIEMENT COOLIFY OPTIMIS√â
# Station Traffeyere IoT/AI Platform - RNCP 39394
# D√©ploiement sans conflits de configuration
# ================================================================

param(
    [switch]$ValidateCompose = $true,
    [switch]$CheckHealth = $true,
    [switch]$ShowLogs = $false,
    [switch]$Force = $false
)

$ErrorActionPreference = "Continue"

Write-Host "================================================================" -ForegroundColor Cyan
Write-Host "  D√âPLOIEMENT COOLIFY OPTIMIS√â" -ForegroundColor Cyan  
Write-Host "  Station Traffey√®re IoT/AI Platform - RNCP 39394" -ForegroundColor Cyan
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host ""

# Configuration
$ComposeFile = "docker-compose.yml"
$EnvFile = ".env.coolify.example"

Write-Host "üìã Configuration:" -ForegroundColor Yellow
Write-Host "  - Compose File: $ComposeFile" -ForegroundColor Gray
Write-Host "  - Env Template: $EnvFile" -ForegroundColor Gray
Write-Host ""

# 1. Validation du fichier docker-compose.yml
if ($ValidateCompose) {
    Write-Host "üîç Validation du fichier docker-compose.yml..." -ForegroundColor Yellow
    
    if (-not (Test-Path $ComposeFile)) {
        Write-Host "[ERROR] Fichier $ComposeFile introuvable !" -ForegroundColor Red
        exit 1
    }
    
    # Test syntaxe docker-compose
    Write-Host "[INFO] V√©rification syntaxe docker-compose..." -ForegroundColor Cyan
    $validateResult = docker-compose -f $ComposeFile config 2>&1
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "[SUCCESS] ‚úÖ Syntaxe docker-compose valide" -ForegroundColor Green
    } else {
        Write-Host "[ERROR] ‚ùå Erreurs dans docker-compose.yml:" -ForegroundColor Red
        $validateResult | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
        if (-not $Force) {
            exit 1
        }
    }
    
    # V√©rification sp√©cifique des fixes appliqu√©s
    Write-Host "[INFO] V√©rification des corrections Coolify..." -ForegroundColor Cyan
    
    $composeContent = Get-Content $ComposeFile -Raw
    
    # V√©rifier absence de conflits container_name + replicas
    if ($composeContent -match 'container_name:.*\n.*replicas:' -or $composeContent -match 'replicas:.*\n.*container_name:') {
        Write-Host "[WARNING] ‚ö†Ô∏è Conflits potentiels container_name/replicas d√©tect√©s" -ForegroundColor Yellow
    } else {
        Write-Host "[SUCCESS] ‚úÖ Pas de conflits container_name/replicas" -ForegroundColor Green
    }
    
    # V√©rifier d√©finition variable SYS
    if ($composeContent -match 'SYS:') {
        Write-Host "[SUCCESS] ‚úÖ Variable SYS d√©finie pour Mosquitto" -ForegroundColor Green
    } else {
        Write-Host "[WARNING] ‚ö†Ô∏è Variable SYS non d√©finie - peut causer des erreurs MQTT" -ForegroundColor Yellow
    }
    
    Write-Host ""
}

# 2. V√©rification des variables d'environnement
Write-Host "üîß Configuration des variables d'environnement..." -ForegroundColor Yellow

if (Test-Path $EnvFile) {
    Write-Host "[INFO] Fichier template trouv√©: $EnvFile" -ForegroundColor Cyan
    Write-Host "[INFO] üìã Variables requises pour Coolify:" -ForegroundColor Cyan
    
    $envContent = Get-Content $EnvFile
    $requiredVars = $envContent | Where-Object { $_ -match '^[A-Z_]+=.*' } | ForEach-Object { ($_ -split '=')[0] }
    
    Write-Host "  Variables critiques:" -ForegroundColor Gray
    $criticalVars = @("POSTGRES_PASSWORD", "REDIS_PASSWORD", "SECRET_KEY", "JWT_SECRET")
    foreach ($var in $criticalVars) {
        if ($var -in $requiredVars) {
            Write-Host "    ‚úÖ $var" -ForegroundColor Green
        } else {
            Write-Host "    ‚ùå $var (manquante)" -ForegroundColor Red
        }
    }
    
    Write-Host "  Total variables: $($requiredVars.Count)" -ForegroundColor Gray
    
} else {
    Write-Host "[WARNING] ‚ö†Ô∏è Fichier template .env non trouv√©" -ForegroundColor Yellow
    Write-Host "[INFO] Cr√©ez un fichier .env avec les variables n√©cessaires" -ForegroundColor Cyan
}

Write-Host ""

# 3. Instructions de d√©ploiement Coolify
Write-Host "üöÄ INSTRUCTIONS D√âPLOIEMENT COOLIFY" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green
Write-Host ""

Write-Host "1Ô∏è‚É£ Dans l'interface Coolify:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Cr√©ez un nouveau projet" -ForegroundColor White
Write-Host "   ‚Ä¢ S√©lectionnez 'Docker Compose' comme type" -ForegroundColor White
Write-Host "   ‚Ä¢ Repository: bandidood/convergence-iot-ai-platform" -ForegroundColor White
Write-Host "   ‚Ä¢ Branch: master" -ForegroundColor White
Write-Host ""

Write-Host "2Ô∏è‚É£ Configuration des variables:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Allez dans l'onglet 'Environment Variables'" -ForegroundColor White
Write-Host "   ‚Ä¢ Importez les variables depuis le fichier template" -ForegroundColor White
Write-Host "   ‚Ä¢ G√©n√©rez des mots de passe s√©curis√©s pour:" -ForegroundColor White
Write-Host "     - POSTGRES_PASSWORD" -ForegroundColor Yellow
Write-Host "     - REDIS_PASSWORD" -ForegroundColor Yellow
Write-Host "     - SECRET_KEY" -ForegroundColor Yellow
Write-Host "     - JWT_SECRET" -ForegroundColor Yellow
Write-Host "     - KEYCLOAK_ADMIN_PASSWORD" -ForegroundColor Yellow
Write-Host ""

Write-Host "3Ô∏è‚É£ Domaines et certificats:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Configurez vos domaines personnalis√©s" -ForegroundColor White
Write-Host "   ‚Ä¢ Activez les certificats SSL automatiques" -ForegroundColor White
Write-Host "   ‚Ä¢ Exemples de domaines:" -ForegroundColor White
Write-Host "     - traffeyere.votre-domaine.fr (frontend)" -ForegroundColor Gray
Write-Host "     - api.votre-domaine.fr (backend)" -ForegroundColor Gray
Write-Host "     - auth.votre-domaine.fr (keycloak)" -ForegroundColor Gray
Write-Host ""

Write-Host "4Ô∏è‚É£ D√©ploiement:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Cliquez sur 'Deploy'" -ForegroundColor White
Write-Host "   ‚Ä¢ Surveillez les logs de d√©ploiement" -ForegroundColor White
Write-Host "   ‚Ä¢ V√©rifiez le statut des services" -ForegroundColor White
Write-Host ""

# 4. Commandes de diagnostic post-d√©ploiement
Write-Host "üîç DIAGNOSTIC POST-D√âPLOIEMENT" -ForegroundColor Magenta
Write-Host "===============================" -ForegroundColor Magenta
Write-Host ""

Write-Host "Commandes utiles pour diagnostic dans Coolify:" -ForegroundColor Yellow
Write-Host ""

Write-Host "üìä Status des services:" -ForegroundColor Cyan
Write-Host "  docker-compose -f $ComposeFile ps" -ForegroundColor Gray
Write-Host ""

Write-Host "üìã Logs des services:" -ForegroundColor Cyan
Write-Host "  docker-compose -f $ComposeFile logs --tail=50" -ForegroundColor Gray
Write-Host "  docker-compose -f $ComposeFile logs backend" -ForegroundColor Gray
Write-Host "  docker-compose -f $ComposeFile logs frontend" -ForegroundColor Gray
Write-Host ""

Write-Host "üè• Health checks:" -ForegroundColor Cyan
Write-Host "  curl -f http://localhost:8000/health  # Backend" -ForegroundColor Gray
Write-Host "  curl -f http://localhost/healthz      # Frontend" -ForegroundColor Gray
Write-Host "  curl -f http://localhost:5432         # PostgreSQL" -ForegroundColor Gray
Write-Host ""

Write-Host "üîß R√©solution probl√®mes courants:" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Service ne d√©marre pas: V√©rifiez les variables d'env" -ForegroundColor Gray
Write-Host "  ‚Ä¢ Erreur de connexion DB: V√©rifiez POSTGRES_PASSWORD" -ForegroundColor Gray
Write-Host "  ‚Ä¢ Erreur MQTT: V√©rifiez la variable SYS" -ForegroundColor Gray
Write-Host "  ‚Ä¢ Build failed: V√©rifiez les Dockerfiles et contexte" -ForegroundColor Gray
Write-Host ""

# 5. Validation finale
Write-Host "‚úÖ CORRECTIONS APPLIQU√âES" -ForegroundColor Green
Write-Host "==========================" -ForegroundColor Green
Write-Host "‚Ä¢ ‚úÖ Variable SYS d√©finie pour Mosquitto" -ForegroundColor Green
Write-Host "‚Ä¢ ‚úÖ Suppression des conflits container_name/replicas" -ForegroundColor Green
Write-Host "‚Ä¢ ‚úÖ Configuration Coolify optimis√©e" -ForegroundColor Green
Write-Host "‚Ä¢ ‚úÖ Variables d'environnement document√©es" -ForegroundColor Green
Write-Host "‚Ä¢ ‚úÖ Healthchecks configur√©s" -ForegroundColor Green
Write-Host "‚Ä¢ ‚úÖ Labels Traefik pour SSL automatique" -ForegroundColor Green
Write-Host ""

Write-Host "üéØ PR√äT POUR D√âPLOIEMENT COOLIFY !" -ForegroundColor Green -BackgroundColor DarkGreen
Write-Host ""

if ($CheckHealth) {
    Write-Host "üè• Test de connectivit√© des services..." -ForegroundColor Yellow
    Write-Host ""
    
    # Test Docker daemon
    try {
        docker version | Out-Null
        Write-Host "‚úÖ Docker daemon accessible" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Docker daemon inaccessible" -ForegroundColor Red
    }
    
    # Test docker-compose
    try {
        docker-compose version | Out-Null
        Write-Host "‚úÖ Docker Compose disponible" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Docker Compose non disponible" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "üìö Documentation compl√®te:" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ README.md: Guide d√©ploiement d√©taill√©" -ForegroundColor Gray
Write-Host "  ‚Ä¢ documentation/: Architecture et guides" -ForegroundColor Gray
Write-Host "  ‚Ä¢ scripts/: Scripts d'automation" -ForegroundColor Gray
Write-Host ""

exit 0
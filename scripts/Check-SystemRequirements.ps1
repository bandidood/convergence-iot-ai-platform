# =============================================================================
# SCRIPT DE V√âRIFICATION EXIGENCES SYST√àME - RNCP 39394 (Windows PowerShell)
# Expert en Syst√®mes d'Information et S√©curit√©
# =============================================================================

# Configuration des couleurs
$Host.UI.RawUI.ForegroundColor = 'Green'

Write-Host "üîß VALIDATION EXIGENCES SYST√àME RNCP 39394" -ForegroundColor Green
Write-Host "==================================================" -ForegroundColor White

# Exigences syst√®me selon le plan technique
$MIN_RAM_GB = 32
$MIN_DISK_GB = 500
$MIN_CPU_CORES = 8
$REQUIRED_GPU = "RTX 3060"

# Variables pour le tracking des erreurs
$ERRORS = 0

function Check-Requirement {
    param(
        [string]$Description,
        [string]$CurrentValue,
        [string]$RequiredValue,
        [string]$Status
    )
    
    if ($Status -eq "OK") {
        Write-Host "‚úÖ $Description`: $CurrentValue (requis: $RequiredValue)" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚ùå $Description`: $CurrentValue (requis: $RequiredValue)" -ForegroundColor Red
        return $false
    }
}

# 1. V√©rification RAM
Write-Host "`nüîç V√©rification RAM..." -ForegroundColor Yellow
try {
    $TotalRAM = Get-CimInstance -ClassName Win32_ComputerSystem | Select-Object -ExpandProperty TotalPhysicalMemory
    $TotalRAM_GB = [Math]::Round($TotalRAM / 1GB, 2)
    
    if ($TotalRAM_GB -ge $MIN_RAM_GB) {
        Check-Requirement "RAM Syst√®me" "$($TotalRAM_GB)GB" "$($MIN_RAM_GB)GB" "OK"
    } else {
        Check-Requirement "RAM Syst√®me" "$($TotalRAM_GB)GB" "$($MIN_RAM_GB)GB" "FAIL"
        $ERRORS++
    }
} catch {
    Write-Host "‚ùå Impossible de d√©tecter la RAM syst√®me" -ForegroundColor Red
    $ERRORS++
}

# 2. V√©rification CPU
Write-Host "`nüîç V√©rification CPU..." -ForegroundColor Yellow
try {
    $CPU_CORES = (Get-CimInstance -ClassName Win32_Processor | Measure-Object -Property NumberOfLogicalProcessors -Sum).Sum
    
    if ($CPU_CORES -ge $MIN_CPU_CORES) {
        Check-Requirement "CPU Cores" "$CPU_CORES" "$MIN_CPU_CORES" "OK"
    } else {
        Check-Requirement "CPU Cores" "$CPU_CORES" "$MIN_CPU_CORES" "FAIL"
        $ERRORS++
    }
} catch {
    Write-Host "‚ùå Impossible de v√©rifier le CPU" -ForegroundColor Red
    $ERRORS++
}

# 3. V√©rification espace disque
Write-Host "`nüîç V√©rification espace disque..." -ForegroundColor Yellow
try {
    $CurrentDrive = (Get-Location).Drive.Name
    $DiskSpace = Get-PSDrive -Name $CurrentDrive | Select-Object -ExpandProperty Free
    $AvailableSpace_GB = [Math]::Round($DiskSpace / 1GB, 2)
    
    if ($AvailableSpace_GB -ge $MIN_DISK_GB) {
        Check-Requirement "Espace Disque" "$($AvailableSpace_GB)GB" "$($MIN_DISK_GB)GB" "OK"
    } else {
        Check-Requirement "Espace Disque" "$($AvailableSpace_GB)GB" "$($MIN_DISK_GB)GB" "FAIL"
        $ERRORS++
    }
} catch {
    Write-Host "‚ùå Impossible de v√©rifier l'espace disque" -ForegroundColor Red
    $ERRORS++
}

# 4. V√©rification GPU (optionnelle mais recommand√©e)
Write-Host "`nüîç V√©rification GPU..." -ForegroundColor Yellow
try {
    $GPUInfo = Get-CimInstance -ClassName Win32_VideoController | Where-Object { $_.Name -like "*NVIDIA*" } | Select-Object -First 1 -ExpandProperty Name
    
    if ($GPUInfo) {
        if ($GPUInfo -like "*RTX 3060*" -or $GPUInfo -like "*RTX 30*" -or $GPUInfo -like "*RTX 40*") {
            Check-Requirement "GPU Compatible" "$GPUInfo" "$REQUIRED_GPU" "OK"
        } else {
            Write-Host "‚ö†Ô∏è  GPU D√©tect√©: $GPUInfo (recommand√©: $REQUIRED_GPU)" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ö†Ô∏è  Aucun GPU NVIDIA d√©tect√© (optionnel pour d√©veloppement)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è  Impossible de d√©tecter le GPU" -ForegroundColor Yellow
}

# 5. V√©rification Docker
Write-Host "`nüîç V√©rification Docker..." -ForegroundColor Yellow
try {
    $DockerVersion = docker --version 2>$null
    if ($DockerVersion) {
        Write-Host "‚úÖ Docker install√©: $DockerVersion" -ForegroundColor Green
        
        # V√©rification que Docker fonctionne
        $DockerInfo = docker info 2>$null
        if ($DockerInfo) {
            Write-Host "‚úÖ Docker daemon op√©rationnel" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Docker daemon non accessible" -ForegroundColor Red
            $ERRORS++
        }
    } else {
        Write-Host "‚ùå Docker non install√©" -ForegroundColor Red
        $ERRORS++
    }
} catch {
    Write-Host "‚ùå Docker non trouv√©" -ForegroundColor Red
    $ERRORS++
}

# 6. V√©rification Docker Compose
Write-Host "`nüîç V√©rification Docker Compose..." -ForegroundColor Yellow
try {
    $ComposeVersion = docker compose version 2>$null
    if ($ComposeVersion) {
        Write-Host "‚úÖ Docker Compose install√©: $ComposeVersion" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Docker Compose non install√©" -ForegroundColor Red
        $ERRORS++
    }
} catch {
    Write-Host "‚ùå Docker Compose non trouv√©" -ForegroundColor Red
    $ERRORS++
}

# 7. V√©rification outils de d√©veloppement
Write-Host "`nüîç V√©rification outils d√©veloppement..." -ForegroundColor Yellow

# Python
try {
    $PythonVersion = python --version 2>$null
    if ($PythonVersion) {
        Write-Host "‚úÖ Python install√©: $PythonVersion" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Python non trouv√©" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è  Python non d√©tect√©" -ForegroundColor Yellow
}

# Node.js
try {
    $NodeVersion = node --version 2>$null
    if ($NodeVersion) {
        Write-Host "‚úÖ Node.js install√©: $NodeVersion" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Node.js non trouv√©" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è  Node.js non d√©tect√©" -ForegroundColor Yellow
}

# Git
try {
    $GitVersion = git --version 2>$null
    if ($GitVersion) {
        Write-Host "‚úÖ Git install√©: $GitVersion" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Git non trouv√©" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è  Git non d√©tect√©" -ForegroundColor Yellow
}

# R√©sum√© final
Write-Host "`n==================================================" -ForegroundColor White
if ($ERRORS -eq 0) {
    Write-Host "üéâ SYST√àME COMPATIBLE - TOUTES EXIGENCES SATISFAITES" -ForegroundColor Green
    Write-Host "‚úÖ Pr√™t pour le d√©ploiement de l'infrastructure s√©curis√©e" -ForegroundColor Green
    
    # Affichage des prochaines √©tapes
    Write-Host "`nüìã PROCHAINES √âTAPES SEMAINE 1:" -ForegroundColor Cyan
    Write-Host "1. Valider votre infrastructure Docker existante" -ForegroundColor White
    Write-Host "2. Examiner le docker-compose.yml actuel" -ForegroundColor White
    Write-Host "3. Commencer la creation du generateur IoT securise" -ForegroundColor White
    Write-Host "4. Configurer l'environnement de developpement" -ForegroundColor White
    
    exit 0
} else {
    Write-Host "‚ö†Ô∏è  $ERRORS EXIGENCE(S) NON SATISFAITE(S)" -ForegroundColor Red
    Write-Host "‚ùå Veuillez corriger les probl√®mes avant de continuer" -ForegroundColor Red
    exit 1
}

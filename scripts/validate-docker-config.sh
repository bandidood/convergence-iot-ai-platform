#!/bin/bash

# =============================================================================
# VALIDATEUR DE CONFIGURATION DOCKER - Ubuntu Server
# V√©rifie et valide les configurations Docker avant d√©ploiement
# =============================================================================

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîç Validation des Configurations Docker pour Ubuntu Server${NC}"
echo "=========================================================="
echo ""

PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ERRORS=0
WARNINGS=0

# Fonction d'affichage des r√©sultats
success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    ((WARNINGS++))
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
    ((ERRORS++))
}

info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# V√©rification des fichiers Docker
check_docker_files() {
    info "V√©rification des fichiers Docker..."
    
    # Docker Compose
    if [[ -f "$PROJECT_DIR/docker-compose.prod.yml" ]]; then
        success "docker-compose.prod.yml trouv√©"
        
        # Validation de la syntaxe YAML
        if command -v docker-compose >/dev/null 2>&1; then
            if docker-compose -f docker-compose.prod.yml config >/dev/null 2>&1; then
                success "Syntaxe docker-compose.prod.yml valide"
            else
                error "Erreur de syntaxe dans docker-compose.prod.yml"
            fi
        else
            warning "docker-compose non install√©, impossible de valider la syntaxe"
        fi
    else
        error "docker-compose.prod.yml non trouv√©"
    fi
    
    # Dockerfile principal
    if [[ -f "$PROJECT_DIR/Dockerfile" ]]; then
        success "Dockerfile principal trouv√©"
    else
        warning "Dockerfile principal non trouv√©"
    fi
}

# V√©rification de la structure des r√©pertoires
check_directory_structure() {
    info "V√©rification de la structure des r√©pertoires..."
    
    local required_dirs=(
        "backend"
        "frontend" 
        "config"
        "config/mosquitto"
        "config/grafana"
        "config/database"
    )
    
    for dir in "${required_dirs[@]}"; do
        if [[ -d "$PROJECT_DIR/$dir" ]]; then
            success "R√©pertoire $dir existe"
        else
            error "R√©pertoire $dir manquant"
        fi
    done
}

# V√©rification des fichiers de configuration
check_config_files() {
    info "V√©rification des fichiers de configuration..."
    
    # Configuration Mosquitto
    if [[ -f "$PROJECT_DIR/config/mosquitto/mosquitto.conf" ]]; then
        success "Configuration Mosquitto trouv√©e"
    else
        error "Configuration Mosquitto manquante"
    fi
    
    # Configuration Prometheus
    if [[ -f "$PROJECT_DIR/config/monitoring/prometheus.yml" ]]; then
        success "Configuration Prometheus trouv√©e"
    else
        warning "Configuration Prometheus manquante (peut √™tre g√©n√©r√©e automatiquement)"
    fi
    
    # Fichier .env
    if [[ -f "$PROJECT_DIR/.env" ]]; then
        success "Fichier .env trouv√©"
        
        # V√©rification des variables critiques
        local required_vars=(
            "POSTGRES_PASSWORD"
            "REDIS_PASSWORD" 
            "SECRET_KEY"
            "JWT_SECRET"
            "DOMAIN_ROOT"
            "ACME_EMAIL"
        )
        
        for var in "${required_vars[@]}"; do
            if grep -q "^${var}=" "$PROJECT_DIR/.env" 2>/dev/null; then
                success "Variable $var d√©finie"
            else
                error "Variable $var manquante dans .env"
            fi
        done
    else
        error "Fichier .env non trouv√©. Lancez ./generate-secrets.sh"
    fi
}

# V√©rification des Dockerfiles sp√©cifiques
check_service_dockerfiles() {
    info "V√©rification des Dockerfiles des services..."
    
    # Backend Dockerfile
    if [[ -f "$PROJECT_DIR/backend/Dockerfile" ]]; then
        success "Dockerfile backend trouv√©"
        
        # V√©rification des bonnes pratiques Ubuntu
        if grep -q "FROM.*alpine" "$PROJECT_DIR/backend/Dockerfile"; then
            success "Image Alpine utilis√©e (optimis√©e pour Ubuntu)"
        else
            warning "Pas d'image Alpine d√©tect√©e"
        fi
        
        if grep -q "USER.*[^root]" "$PROJECT_DIR/backend/Dockerfile"; then
            success "Utilisateur non-root configur√©"
        else
            error "Aucun utilisateur non-root configur√© (s√©curit√©)"
        fi
    else
        error "Dockerfile backend manquant"
    fi
    
    # Frontend Dockerfile
    if [[ -f "$PROJECT_DIR/frontend/Dockerfile" ]]; then
        success "Dockerfile frontend trouv√©"
    else
        error "Dockerfile frontend manquant"
    fi
}

# V√©rification des permissions Unix
check_unix_permissions() {
    info "V√©rification des permissions Unix..."
    
    # Scripts ex√©cutables
    local scripts=(
        "generate-secrets.sh"
        "deploy-coolify.sh" 
        "ubuntu-setup.sh"
        "validate-docker-config.sh"
    )
    
    for script in "${scripts[@]}"; do
        if [[ -f "$PROJECT_DIR/$script" ]]; then
            if [[ -x "$PROJECT_DIR/$script" ]]; then
                success "Script $script ex√©cutable"
            else
                warning "Script $script non ex√©cutable (chmod +x requis)"
            fi
        fi
    done
    
    # R√©pertoires de configuration
    if [[ -d "$PROJECT_DIR/config" ]]; then
        local config_perms=$(stat -c "%a" "$PROJECT_DIR/config" 2>/dev/null || echo "unknown")
        if [[ "$config_perms" == "755" ]]; then
            success "Permissions config/ correctes (755)"
        else
            warning "Permissions config/ : $config_perms (755 recommand√©)"
        fi
    fi
}

# V√©rification de la compatibilit√© Ubuntu
check_ubuntu_compatibility() {
    info "V√©rification de la compatibilit√© Ubuntu Server..."
    
    # V√©rification des volumes Docker
    if grep -q "driver: local" "$PROJECT_DIR/docker-compose.prod.yml" 2>/dev/null; then
        success "Volumes Docker locaux (compatible Ubuntu)"
    else
        warning "Pilotes de volumes non sp√©cifi√©s"
    fi
    
    # V√©rification des chemins Unix
    if grep -q "/var/run/docker.sock" "$PROJECT_DIR/docker-compose.prod.yml" 2>/dev/null; then
        success "Socket Docker Unix configur√©"
    else
        error "Socket Docker Unix non trouv√©"
    fi
    
    # V√©rification de l'exposition des ports
    if grep -q "ports:" "$PROJECT_DIR/docker-compose.prod.yml" 2>/dev/null; then
        success "Ports expos√©s d√©finis"
        
        # V√©rifier qu'on n'expose que les ports n√©cessaires
        local exposed_ports=$(grep -A 2 "ports:" "$PROJECT_DIR/docker-compose.prod.yml" | grep -o '"[0-9]*:[0-9]*"' | wc -l)
        if [[ $exposed_ports -gt 10 ]]; then
            warning "Beaucoup de ports expos√©s ($exposed_ports), v√©rifiez la s√©curit√©"
        else
            success "Nombre de ports expos√©s raisonnable ($exposed_ports)"
        fi
    fi
}

# V√©rification des ressources syst√®me
check_system_resources() {
    info "V√©rification des exigences de ressources..."
    
    # Analyse du docker-compose pour les limites de ressources
    if grep -q "deploy:" "$PROJECT_DIR/docker-compose.prod.yml" 2>/dev/null; then
        if grep -q "limits:" "$PROJECT_DIR/docker-compose.prod.yml" 2>/dev/null; then
            success "Limites de ressources d√©finies"
        else
            warning "Aucune limite de ressources d√©finie"
        fi
    else
        warning "Section deploy non trouv√©e (limites de ressources)"
    fi
    
    # Estimation de la RAM requise
    local services_count=$(grep -c "container_name:" "$PROJECT_DIR/docker-compose.prod.yml" 2>/dev/null || echo "0")
    local estimated_ram=$((services_count * 512)) # 512 MB par service en moyenne
    
    info "Services d√©tect√©s: $services_count"
    info "RAM estim√©e requise: ${estimated_ram} MB"
    
    if [[ $estimated_ram -gt 8192 ]]; then
        warning "RAM requise √©lev√©e (${estimated_ram} MB). Serveur 8GB+ recommand√©."
    elif [[ $estimated_ram -gt 4096 ]]; then
        info "RAM requise mod√©r√©e (${estimated_ram} MB). Serveur 4GB+ recommand√©."
    else
        success "RAM requise acceptable (${estimated_ram} MB)."
    fi
}

# V√©rifications de s√©curit√©
check_security() {
    info "V√©rification de la configuration de s√©curit√©..."
    
    # V√©rifier qu'aucun mot de passe n'est en dur
    if grep -r "password.*=" "$PROJECT_DIR/docker-compose.prod.yml" 2>/dev/null | grep -v "\${" | grep -v "#"; then
        error "Mots de passe en dur d√©tect√©s dans docker-compose.prod.yml"
    else
        success "Aucun mot de passe en dur dans la configuration"
    fi
    
    # V√©rifier l'utilisation de variables d'environnement
    local env_vars_count=$(grep -c "\${" "$PROJECT_DIR/docker-compose.prod.yml" 2>/dev/null || echo "0")
    if [[ $env_vars_count -gt 5 ]]; then
        success "Variables d'environnement utilis√©es ($env_vars_count)"
    else
        warning "Peu de variables d'environnement utilis√©es ($env_vars_count)"
    fi
    
    # V√©rifier les health checks
    if grep -q "healthcheck:" "$PROJECT_DIR/docker-compose.prod.yml" 2>/dev/null; then
        success "Health checks configur√©s"
    else
        warning "Aucun health check configur√©"
    fi
    
    # V√©rifier le restart policy
    if grep -q "restart: unless-stopped" "$PROJECT_DIR/docker-compose.prod.yml" 2>/dev/null; then
        success "Politique de red√©marrage s√©curis√©e"
    else
        warning "Politique de red√©marrage non optimale"
    fi
}

# Recommandations d'optimisation Ubuntu
show_ubuntu_optimizations() {
    echo ""
    info "Recommandations d'optimisation Ubuntu Server:"
    echo ""
    
    echo -e "${BLUE}üìã Optimisations Syst√®me:${NC}"
    echo "‚Ä¢ Augmenter les limites de fichiers : echo '* soft nofile 65536' >> /etc/security/limits.conf"
    echo "‚Ä¢ Configurer swappiness : echo 'vm.swappiness=10' >> /etc/sysctl.conf" 
    echo "‚Ä¢ Activer IP forwarding : echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf"
    echo ""
    
    echo -e "${BLUE}üîí S√©curit√© Ubuntu:${NC}"
    echo "‚Ä¢ Configurer UFW : sudo ufw enable && sudo ufw default deny"
    echo "‚Ä¢ Installer Fail2Ban : sudo apt install fail2ban"
    echo "‚Ä¢ Mettre √† jour r√©guli√®rement : sudo apt update && sudo apt upgrade"
    echo ""
    
    echo -e "${BLUE}üìä Monitoring Ubuntu:${NC}"
    echo "‚Ä¢ Surveiller : htop, docker stats, df -h"
    echo "‚Ä¢ Logs syst√®me : journalctl -f"
    echo "‚Ä¢ Logs Docker : docker-compose logs -f"
}

# G√©n√©ration du rapport
generate_report() {
    echo ""
    echo -e "${BLUE}üìä RAPPORT DE VALIDATION${NC}"
    echo "=========================="
    
    if [[ $ERRORS -eq 0 && $WARNINGS -eq 0 ]]; then
        echo -e "${GREEN}üéâ Configuration parfaite ! Pr√™te pour le d√©ploiement Ubuntu.${NC}"
    elif [[ $ERRORS -eq 0 ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Configuration fonctionnelle avec $WARNINGS avertissement(s).${NC}"
        echo -e "${YELLOW}   Le d√©ploiement peut proc√©der mais des optimisations sont recommand√©es.${NC}"
    else
        echo -e "${RED}‚ùå Configuration incompl√®te : $ERRORS erreur(s), $WARNINGS avertissement(s).${NC}"
        echo -e "${RED}   Corrigez les erreurs avant de d√©ployer sur Ubuntu.${NC}"
    fi
    
    echo ""
    echo -e "${BLUE}üìà Statistiques:${NC}"
    echo "‚Ä¢ Erreurs critiques : $ERRORS"
    echo "‚Ä¢ Avertissements : $WARNINGS"
    echo "‚Ä¢ R√©pertoire projet : $PROJECT_DIR"
    echo ""
    
    if [[ $ERRORS -gt 0 ]]; then
        echo -e "${RED}üîß Actions requises:${NC}"
        echo "1. Corrigez les erreurs list√©es ci-dessus"
        echo "2. Relancez la validation : ./validate-docker-config.sh"
        echo "3. Proc√©dez au d√©ploiement : ./ubuntu-setup.sh"
    else
        echo -e "${GREEN}‚úÖ Prochaines √©tapes:${NC}"
        echo "1. Transf√©rez les fichiers vers Ubuntu : ./deploy-to-ubuntu.ps1"
        echo "2. Installez l'environnement : ./ubuntu-setup.sh --full"
        echo "3. D√©ployez avec Coolify : ./deploy-coolify.sh"
    fi
}

# Ex√©cution des v√©rifications
main() {
    echo -e "${BLUE}üèÅ D√©but de la validation...${NC}"
    echo ""
    
    check_docker_files
    echo ""
    
    check_directory_structure  
    echo ""
    
    check_config_files
    echo ""
    
    check_service_dockerfiles
    echo ""
    
    check_unix_permissions
    echo ""
    
    check_ubuntu_compatibility
    echo ""
    
    check_system_resources
    echo ""
    
    check_security
    echo ""
    
    show_ubuntu_optimizations
    
    generate_report
}

# Point d'entr√©e
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
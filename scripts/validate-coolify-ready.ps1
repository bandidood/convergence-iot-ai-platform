# ================================================================
# VALIDATION COOLIFY READY - Station Traffey√®re
# V√©rification finale avant d√©ploiement Coolify
# ================================================================

Write-Host "================================================================" -ForegroundColor Cyan
Write-Host "  VALIDATION COOLIFY DEPLOYMENT READY" -ForegroundColor Cyan
Write-Host "  Station Traffey√®re IoT/AI Platform - RNCP 39394" -ForegroundColor Cyan
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host ""

$errors = 0
$warnings = 0

# 1. Validation syntax docker-compose.yml
Write-Host "üîç Validation syntaxe docker-compose.yml..." -ForegroundColor Yellow
try {
    $composeResult = docker-compose -f docker-compose.yml config --quiet 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Syntaxe docker-compose valide" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur syntaxe docker-compose" -ForegroundColor Red
        $composeResult | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
        $errors++
    }
} catch {
    Write-Host "‚ùå Docker Compose non disponible" -ForegroundColor Red
    $errors++
}

# 2. V√©rification absence variables probl√©matiques
Write-Host "üîç V√©rification variables d'environnement..." -ForegroundColor Yellow
$composeContent = Get-Content docker-compose.yml -Raw

if ($composeContent -match '\$SYS' -or $composeContent -match 'SYS=') {
    Write-Host "‚ö†Ô∏è Variables SYS d√©tect√©es (peuvent causer probl√®mes Coolify)" -ForegroundColor Yellow
    $warnings++
} else {
    Write-Host "‚úÖ Pas de variables probl√©matiques SYS" -ForegroundColor Green
}

# 3. V√©rification structure services
Write-Host "üîç V√©rification services requis..." -ForegroundColor Yellow
$requiredServices = @("postgres", "redis", "backend", "frontend", "mosquitto", "keycloak")
$foundServices = 0

foreach ($service in $requiredServices) {
    $pattern = "^\s*${service}:\s*$"
    if ($composeContent -match $pattern) {
        Write-Host "  ‚úÖ Service $service trouv√©" -ForegroundColor Green
        $foundServices++
    } else {
        Write-Host "  ‚ùå Service $service manquant" -ForegroundColor Red
        $errors++
    }
}

Write-Host "üìä Services trouv√©s: $foundServices/$($requiredServices.Count)" -ForegroundColor Cyan

# 4. V√©rification conflits Coolify (replicas/container_name)
Write-Host "üîç V√©rification conflits Coolify..." -ForegroundColor Yellow
if ($composeContent -match 'container_name:' -and $composeContent -match 'replicas:') {
    Write-Host "‚ö†Ô∏è Conflit container_name/replicas d√©tect√©" -ForegroundColor Yellow
    $warnings++
} else {
    Write-Host "‚úÖ Pas de conflits container_name/replicas" -ForegroundColor Green
}

# 5. V√©rification Dockerfiles
Write-Host "üîç V√©rification Dockerfiles..." -ForegroundColor Yellow
$dockerfiles = @("services/backend/Dockerfile", "services/frontend/Dockerfile")
foreach ($dockerfile in $dockerfiles) {
    if (Test-Path $dockerfile) {
        Write-Host "  ‚úÖ $dockerfile trouv√©" -ForegroundColor Green
    } else {
        Write-Host "  ‚ö†Ô∏è $dockerfile manquant" -ForegroundColor Yellow
        $warnings++
    }
}

# R√©sum√© final
Write-Host ""
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host "R√âSUM√â VALIDATION" -ForegroundColor Cyan
Write-Host "================================================================" -ForegroundColor Cyan

if ($errors -eq 0 -and $warnings -eq 0) {
    Write-Host "üéâ PARFAIT! Pr√™t pour d√©ploiement Coolify" -ForegroundColor Green -BackgroundColor DarkGreen
    Write-Host ""
    Write-Host "‚úÖ Aucune erreur critique" -ForegroundColor Green
    Write-Host "‚úÖ Aucun warning" -ForegroundColor Green
    Write-Host "‚úÖ Architecture compl√®te valid√©e" -ForegroundColor Green
} elseif ($errors -eq 0) {
    Write-Host "‚úÖ PR√äT avec warnings mineurs" -ForegroundColor Yellow -BackgroundColor DarkYellow
    Write-Host ""
    Write-Host "‚úÖ Aucune erreur critique" -ForegroundColor Green
    Write-Host "‚ö†Ô∏è  $warnings warnings (non bloquants)" -ForegroundColor Yellow
} else {
    Write-Host "‚ùå ERREURS √Ä CORRIGER" -ForegroundColor Red -BackgroundColor DarkRed
    Write-Host ""
    Write-Host "‚ùå $errors erreurs critiques" -ForegroundColor Red
    Write-Host "‚ö†Ô∏è  $warnings warnings" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üöÄ INSTRUCTIONS D√âPLOIEMENT COOLIFY:" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host "1. Dans Coolify, cr√©er nouveau projet Docker Compose" -ForegroundColor White
Write-Host "2. Repository: bandidood/convergence-iot-ai-platform" -ForegroundColor White
Write-Host "3. Branch: master" -ForegroundColor White
Write-Host "4. Configurer variables d'environnement depuis .env.coolify.example" -ForegroundColor White
Write-Host "5. Variables critiques √† d√©finir:" -ForegroundColor White
Write-Host "   - POSTGRES_PASSWORD" -ForegroundColor Yellow
Write-Host "   - REDIS_PASSWORD" -ForegroundColor Yellow
Write-Host "   - SECRET_KEY" -ForegroundColor Yellow
Write-Host "   - JWT_SECRET" -ForegroundColor Yellow
Write-Host "6. Lancer d√©ploiement" -ForegroundColor White
Write-Host ""
Write-Host "üìã Services d√©ploy√©s:" -ForegroundColor Cyan
Write-Host "   - PostgreSQL (TimescaleDB)" -ForegroundColor Gray
Write-Host "   - Redis (Cache)" -ForegroundColor Gray
Write-Host "   - InfluxDB (M√©triques IoT)" -ForegroundColor Gray
Write-Host "   - MinIO (Stockage S3)" -ForegroundColor Gray
Write-Host "   - Keycloak (Identity Management)" -ForegroundColor Gray
Write-Host "   - Mosquitto (MQTT Broker)" -ForegroundColor Gray
Write-Host "   - Backend (API FastAPI)" -ForegroundColor Gray
Write-Host "   - Frontend (React Dashboard)" -ForegroundColor Gray
Write-Host ""

exit $errors
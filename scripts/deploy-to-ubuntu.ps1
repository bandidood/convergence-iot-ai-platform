# =============================================================================
# SCRIPT DE TRANSFERT - Station Traffey√®re IoT/AI Platform
# Transfert des fichiers de configuration depuis Windows vers Ubuntu Server
# =============================================================================

param(
    [Parameter(Mandatory=$true)]
    [string]$ServerIP,
    
    [Parameter(Mandatory=$true)]
    [string]$Username,
    
    [Parameter(Mandatory=$false)]
    [string]$KeyPath = "",
    
    [Parameter(Mandatory=$false)]
    [string]$ProjectPath = "/home/$Username/station-traffeyere",
    
    [Parameter(Mandatory=$false)]
    [switch]$CreateEnv
)

Write-Host "üöÄ D√©ploiement Station Traffey√®re vers Ubuntu Server" -ForegroundColor Blue
Write-Host "=====================================================" -ForegroundColor Blue
Write-Host ""

# V√©rification des pr√©requis
$scpPath = Get-Command scp -ErrorAction SilentlyContinue
if (-not $scpPath) {
    Write-Host "‚ùå SCP n'est pas install√©. Installez OpenSSH ou Git Bash." -ForegroundColor Red
    Write-Host "üí° Vous pouvez installer OpenSSH avec: Add-WindowsCapability -Online -Name OpenSSH.Client" -ForegroundColor Yellow
    exit 1
}

# Configuration SSH
$sshOptions = @()
if ($KeyPath) {
    if (Test-Path $KeyPath) {
        $sshOptions += "-i `"$KeyPath`""
    } else {
        Write-Host "‚ùå Fichier de cl√© SSH introuvable: $KeyPath" -ForegroundColor Red
        exit 1
    }
}

$sshString = if ($KeyPath) { "$($sshOptions -join ' ') $Username@$ServerIP" } else { "$Username@$ServerIP" }

Write-Host "üîß Configuration:" -ForegroundColor Cyan
Write-Host "   Serveur: $Username@$ServerIP" -ForegroundColor Gray
Write-Host "   Chemin projet: $ProjectPath" -ForegroundColor Gray
if ($KeyPath) { Write-Host "   Cl√© SSH: $KeyPath" -ForegroundColor Gray }
Write-Host ""

# Test de connexion SSH
Write-Host "üîç Test de connexion SSH..." -ForegroundColor Yellow
$testConnection = if ($KeyPath) {
    ssh $sshOptions.Split(' ') $Username@$ServerIP "echo 'Connexion r√©ussie'"
} else {
    ssh $Username@$ServerIP "echo 'Connexion r√©ussie'"
}

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Impossible de se connecter au serveur Ubuntu" -ForegroundColor Red
    Write-Host "üí° V√©rifiez:" -ForegroundColor Yellow
    Write-Host "   - L'adresse IP du serveur" -ForegroundColor Gray
    Write-Host "   - Le nom d'utilisateur" -ForegroundColor Gray
    Write-Host "   - La cl√© SSH (si utilis√©e)" -ForegroundColor Gray
    Write-Host "   - Que le service SSH est actif sur Ubuntu" -ForegroundColor Gray
    exit 1
}

Write-Host "‚úÖ Connexion SSH √©tablie" -ForegroundColor Green
Write-Host ""

# Cr√©ation du r√©pertoire projet sur Ubuntu
Write-Host "üìÅ Cr√©ation du r√©pertoire projet..." -ForegroundColor Yellow
if ($KeyPath) {
    ssh $sshOptions.Split(' ') $Username@$ServerIP "mkdir -p $ProjectPath && cd $ProjectPath"
} else {
    ssh $Username@$ServerIP "mkdir -p $ProjectPath && cd $ProjectPath"
}

# Liste des fichiers √† transf√©rer
$filesToTransfer = @(
    @{Local=".env.production"; Remote=".env.production"},
    @{Local="generate-secrets.sh"; Remote="generate-secrets.sh"},
    @{Local="deploy-coolify.sh"; Remote="deploy-coolify.sh"},
    @{Local="docker-compose.prod.yml"; Remote="docker-compose.prod.yml"},
    @{Local="DEPLOYMENT_GUIDE.md"; Remote="DEPLOYMENT_GUIDE.md"},
    @{Local="README-DEPLOYMENT.md"; Remote="README-DEPLOYMENT.md"}
)

# R√©pertoires √† transf√©rer
$dirsToTransfer = @(
    "config",
    "backend",
    "frontend"
)

Write-Host "üì¶ Transfert des fichiers de configuration..." -ForegroundColor Yellow

# Transfert des fichiers individuels
foreach ($file in $filesToTransfer) {
    if (Test-Path $file.Local) {
        Write-Host "   Transfert: $($file.Local)" -ForegroundColor Gray
        if ($KeyPath) {
            scp $sshOptions.Split(' ') $file.Local "$Username@$ServerIP`:$ProjectPath/$($file.Remote)"
        } else {
            scp $file.Local "$Username@$ServerIP`:$ProjectPath/$($file.Remote)"
        }
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Erreur lors du transfert de $($file.Local)" -ForegroundColor Red
        } else {
            Write-Host "   ‚úÖ $($file.Local) transf√©r√©" -ForegroundColor Green
        }
    } else {
        Write-Host "   ‚ö†Ô∏è  Fichier non trouv√©: $($file.Local)" -ForegroundColor Yellow
    }
}

# Transfert des r√©pertoires
foreach ($dir in $dirsToTransfer) {
    if (Test-Path $dir) {
        Write-Host "   Transfert du r√©pertoire: $dir" -ForegroundColor Gray
        if ($KeyPath) {
            scp -r $sshOptions.Split(' ') $dir "$Username@$ServerIP`:$ProjectPath/"
        } else {
            scp -r $dir "$Username@$ServerIP`:$ProjectPath/"
        }
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Erreur lors du transfert du r√©pertoire $dir" -ForegroundColor Red
        } else {
            Write-Host "   ‚úÖ R√©pertoire $dir transf√©r√©" -ForegroundColor Green
        }
    } else {
        Write-Host "   ‚ö†Ô∏è  R√©pertoire non trouv√©: $dir" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "üîß Configuration des permissions sur Ubuntu..." -ForegroundColor Yellow

# Commandes √† ex√©cuter sur Ubuntu
$ubuntuCommands = @(
    "cd $ProjectPath",
    "chmod +x *.sh",
    "chmod -R 755 config/",
    "find . -name '*.yml' -exec chmod 644 {} \;",
    "find . -name '*.json' -exec chmod 644 {} \;",
    "find . -name '*.conf' -exec chmod 644 {} \;"
)

foreach ($cmd in $ubuntuCommands) {
    Write-Host "   Ex√©cution: $cmd" -ForegroundColor Gray
    if ($KeyPath) {
        ssh $sshOptions.Split(' ') $Username@$ServerIP $cmd
    } else {
        ssh $Username@$ServerIP $cmd
    }
}

Write-Host "‚úÖ Permissions configur√©es" -ForegroundColor Green
Write-Host ""

# Installation des pr√©requis Ubuntu
Write-Host "üìã Installation des pr√©requis Ubuntu..." -ForegroundColor Yellow
$prerequisites = @(
    "sudo apt update",
    "sudo apt install -y curl wget git openssl pwgen docker.io docker-compose",
    "sudo systemctl enable docker",
    "sudo systemctl start docker",
    "sudo usermod -aG docker $Username",
    "curl -fsSL https://cdn.coollabs.io/coolify/install.sh | bash"
)

Write-Host "üí° Commandes √† ex√©cuter sur votre serveur Ubuntu:" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan
foreach ($cmd in $prerequisites) {
    Write-Host "   $cmd" -ForegroundColor Gray
}
Write-Host ""

# G√©n√©ration des secrets si demand√©
if ($CreateEnv) {
    Write-Host "üîê G√©n√©ration du fichier .env sur Ubuntu..." -ForegroundColor Yellow
    if ($KeyPath) {
        ssh $sshOptions.Split(' ') $Username@$ServerIP "cd $ProjectPath && ./generate-secrets.sh"
    } else {
        ssh $Username@$ServerIP "cd $ProjectPath && ./generate-secrets.sh"
    }
}

Write-Host ""
Write-Host "üéâ TRANSFERT TERMIN√â AVEC SUCC√àS!" -ForegroundColor Green
Write-Host "==================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìù PROCHAINES √âTAPES SUR UBUNTU SERVER:" -ForegroundColor Cyan
Write-Host "1. Connectez-vous √† votre serveur:" -ForegroundColor White
Write-Host "   ssh $Username@$ServerIP" -ForegroundColor Gray
Write-Host ""
Write-Host "2. Allez dans le r√©pertoire projet:" -ForegroundColor White
Write-Host "   cd $ProjectPath" -ForegroundColor Gray
Write-Host ""
Write-Host "3. G√©n√©rez les secrets (si pas fait):" -ForegroundColor White
Write-Host "   ./generate-secrets.sh" -ForegroundColor Gray
Write-Host ""
Write-Host "4. Configurez votre domaine dans .env" -ForegroundColor White
Write-Host ""
Write-Host "5. Lancez le d√©ploiement:" -ForegroundColor White
Write-Host "   ./deploy-coolify.sh" -ForegroundColor Gray
Write-Host ""
Write-Host "üìñ Consultez DEPLOYMENT_GUIDE.md pour les d√©tails" -ForegroundColor Yellow
Write-Host ""

# Affichage des URLs d'acc√®s pr√©vues
Write-Host "üåê URLs D'ACC√àS APR√àS D√âPLOIEMENT:" -ForegroundColor Magenta
Write-Host "===================================" -ForegroundColor Magenta
Write-Host "Frontend:    https://app.votre-domaine.com" -ForegroundColor White
Write-Host "API:         https://api.votre-domaine.com" -ForegroundColor White
Write-Host "Grafana:     https://grafana.votre-domaine.com" -ForegroundColor White
Write-Host "Coolify:     https://coolify.votre-domaine.com" -ForegroundColor White
Write-Host ""
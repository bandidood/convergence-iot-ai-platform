# =============================================================================
# INITIALISATION REPOSITORY GIT - Station Traffey√®re IoT/AI Platform
# Pr√©pare le repository pour le d√©ploiement sur Coolify
# =============================================================================

param(
    [Parameter(Mandatory=$false)]
    [string]$RemoteURL = "",
    
    [Parameter(Mandatory=$false)]
    [switch]$CreateMain,
    
    [Parameter(Mandatory=$false)]
    [switch]$Force
)

Write-Host "üîß Initialisation Repository Git - Station Traffey√®re" -ForegroundColor Blue
Write-Host "====================================================" -ForegroundColor Blue
Write-Host ""

# V√©rifier l'√©tat actuel du repository
Write-Host "üîç V√©rification de l'√©tat Git..." -ForegroundColor Yellow

$gitStatus = git status --porcelain 2>$null
$currentBranch = git branch --show-current 2>$null
$hasRemote = git remote -v 2>$null

Write-Host "   Branche actuelle: $currentBranch" -ForegroundColor Gray
Write-Host "   Fichiers modifi√©s: $(if($gitStatus) { ($gitStatus | Measure-Object).Count } else { '0' })" -ForegroundColor Gray

if ($hasRemote) {
    Write-Host "   Remote configur√©: ‚úÖ" -ForegroundColor Green
    git remote -v | ForEach-Object { Write-Host "     $_" -ForegroundColor Gray }
} else {
    Write-Host "   Remote configur√©: ‚ùå" -ForegroundColor Red
}

Write-Host ""

# Option 1: Cr√©er une branche main si demand√©
if ($CreateMain) {
    Write-Host "üåø Cr√©ation de la branche main..." -ForegroundColor Yellow
    
    try {
        # S'assurer qu'on est sur master
        git checkout master
        
        # Cr√©er et checkout la branche main
        git checkout -b main
        
        # Push la nouvelle branche
        if ($hasRemote) {
            git push -u origin main
            Write-Host "‚úÖ Branche main cr√©√©e et pouss√©e vers le remote" -ForegroundColor Green
        } else {
            Write-Host "‚úÖ Branche main cr√©√©e localement" -ForegroundColor Green
            Write-Host "‚ö†Ô∏è  Configurez un remote pour pousser la branche" -ForegroundColor Yellow
        }
        
        $currentBranch = "main"
    } catch {
        Write-Host "‚ùå Erreur lors de la cr√©ation de la branche main: $($_.Exception.Message)" -ForegroundColor Red
        if (-not $Force) { exit 1 }
    }
}

# Ajouter un remote si fourni
if ($RemoteURL) {
    Write-Host "üîó Configuration du remote..." -ForegroundColor Yellow
    
    try {
        # Supprimer le remote existant si n√©cessaire
        if ($hasRemote) {
            git remote remove origin
        }
        
        # Ajouter le nouveau remote
        git remote add origin $RemoteURL
        
        # V√©rifier la connexion
        git ls-remote origin > $null
        
        Write-Host "‚úÖ Remote configur√©: $RemoteURL" -ForegroundColor Green
        
        # Push la branche actuelle
        git push -u origin $currentBranch
        Write-Host "‚úÖ Branche $currentBranch pouss√©e vers le remote" -ForegroundColor Green
        
    } catch {
        Write-Host "‚ùå Erreur lors de la configuration du remote: $($_.Exception.Message)" -ForegroundColor Red
        if (-not $Force) { exit 1 }
    }
}

# Commit les changements si n√©cessaire
if ($gitStatus) {
    Write-Host "üìù Commit des modifications en attente..." -ForegroundColor Yellow
    
    $commitMessage = "feat: Configuration d√©ploiement Coolify Ubuntu Server

- Scripts de d√©ploiement automatis√©
- Configuration Docker adapt√©e
- Support Coolify API
- Documentation compl√®te
- Variables d'environnement s√©curis√©es

Pr√™t pour d√©ploiement production sur Ubuntu + Coolify"

    try {
        git add .
        git commit -m $commitMessage
        
        Write-Host "‚úÖ Modifications commit√©es" -ForegroundColor Green
        Write-Host "   Message: Configuration d√©ploiement Coolify Ubuntu Server" -ForegroundColor Gray
        
        # Push si remote configur√©
        if (git remote -v 2>$null) {
            git push
            Write-Host "‚úÖ Changements pouss√©s vers le remote" -ForegroundColor Green
        }
        
    } catch {
        Write-Host "‚ùå Erreur lors du commit: $($_.Exception.Message)" -ForegroundColor Red
        if (-not $Force) { exit 1 }
    }
} else {
    Write-Host "‚úÖ Aucune modification √† committer" -ForegroundColor Green
}

# Afficher l'√©tat final
Write-Host ""
Write-Host "üìä √âtat final du repository:" -ForegroundColor Cyan

$finalBranch = git branch --show-current
$finalRemote = git remote -v 2>$null
$lastCommit = git log --oneline -1 2>$null

Write-Host "   Branche active: $finalBranch" -ForegroundColor White
if ($finalRemote) {
    Write-Host "   Remote:" -ForegroundColor White
    $finalRemote | ForEach-Object { Write-Host "     $_" -ForegroundColor Gray }
} else {
    Write-Host "   Remote: Non configur√©" -ForegroundColor Yellow
}
Write-Host "   Dernier commit: $lastCommit" -ForegroundColor Gray

Write-Host ""

# Recommandations bas√©es sur la configuration
Write-Host "üí° RECOMMANDATIONS:" -ForegroundColor Magenta

if ($finalBranch -eq "master") {
    Write-Host "‚úÖ Vous √™tes sur la branche 'master'" -ForegroundColor Green
    Write-Host "   Vos scripts Coolify sont configur√©s pour utiliser 'master'" -ForegroundColor Gray
    Write-Host ""
    Write-Host "   Pour cr√©er une branche 'main' (optionnel):" -ForegroundColor Yellow
    Write-Host "   .\init-git-repo.ps1 -CreateMain" -ForegroundColor Gray
} elseif ($finalBranch -eq "main") {
    Write-Host "‚úÖ Vous √™tes sur la branche 'main'" -ForegroundColor Green
    Write-Host "   Vos scripts Coolify utilisent maintenant 'master'" -ForegroundColor Yellow
    Write-Host "   Vous pouvez:" -ForegroundColor Yellow
    Write-Host "   1. Rester sur 'main' et modifier les scripts pour utiliser 'main'" -ForegroundColor Gray
    Write-Host "   2. Ou revenir sur 'master': git checkout master" -ForegroundColor Gray
}

if (-not $finalRemote) {
    Write-Host ""
    Write-Host "‚ö†Ô∏è  Remote Git non configur√©" -ForegroundColor Yellow
    Write-Host "   Pour d√©ployer via Git avec Coolify:" -ForegroundColor Gray
    Write-Host "   .\init-git-repo.ps1 -RemoteURL 'https://github.com/username/repo.git'" -ForegroundColor Gray
    Write-Host ""
    Write-Host "   Ou d√©ployez via fichiers locaux (sans Git)" -ForegroundColor Gray
}

Write-Host ""
Write-Host "üöÄ PROCHAINES √âTAPES:" -ForegroundColor Cyan

if ($finalRemote) {
    Write-Host "1. Votre repository est pr√™t pour le d√©ploiement Git!" -ForegroundColor White
    Write-Host "2. Utilisez l'URL du repository dans le d√©ploiement Coolify:" -ForegroundColor White
    
    $repoURL = (git remote get-url origin 2>$null)
    if ($repoURL) {
        Write-Host "   Repository URL: $repoURL" -ForegroundColor Gray
    }
    
    Write-Host ""
    Write-Host "3. Commande de d√©ploiement avec Git:" -ForegroundColor White
    Write-Host "   .\deploy-to-coolify.ps1 -CoolifyURL 'your-coolify' -CoolifyToken 'token' -ServerIP 'ip' -Username 'ubuntu' -GitRepository '$repoURL'" -ForegroundColor Gray
} else {
    Write-Host "1. Repository pr√™t pour d√©ploiement local (sans Git)" -ForegroundColor White
    Write-Host "2. Commande de d√©ploiement local:" -ForegroundColor White
    Write-Host "   .\deploy-to-coolify.ps1 -CoolifyURL 'your-coolify' -CoolifyToken 'token' -ServerIP 'ip' -Username 'ubuntu'" -ForegroundColor Gray
}

Write-Host ""
Write-Host "‚úÖ Repository Git initialis√© avec succ√®s!" -ForegroundColor Green